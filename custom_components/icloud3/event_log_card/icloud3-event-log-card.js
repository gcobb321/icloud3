/////////////////////////////////////////////////////////////////////////////
//
//  ICLOUD3 EVENT LOG CARD
//
//  This custom card displays Event Log records generated by the iCloud3
//  Custom Component.  The event log records and control fields are stored
//  in the sensor.icloud3_event_log entity.
//
//  When iCloud3 starts, the version of this file, 'icloud3-event-log-card.js',
//  in the 'custom_components\icloud3' directory  (or the current directory of
//  the icloud3 platform being run) is compared with the one in 'www/custom_cards'.
//  If they do not match, the one in the 'custom_components\icloud3' is copied
//  to the 'www\custom_cards' directory.
//
//  v3.1.1 - Fixed problem creating btnConfig url.
//
/////////////////////////////////////////////////////////////////////////////

class iCloud3EventLogCard extends HTMLElement {

    constructor() {
        super()
        this.attachShadow({ mode: 'open' })
    }
    //---------------------------------------------------------------------------
    setConfig(config) {
        const version = "3.1.1"
        const cardTitle = "iCloud3 v3 - Event Log"

        const root = this.shadowRoot
        const hass = this._hass

        // Create card elements
        const card = document.createElement('ha-card')
        const background = document.createElement('div')
        background.id = "background"

        // Title Bar
        const titleBar = document.createElement("div")
        titleBar.id = "titleBar"
        const title = document.createElement("div")
        title.id = "title"
        title.textContent = cardTitle

        //Utility base contains hidden variables
        const utilityBar = document.createElement("div")
        utilityBar.id = "utilityBar"

        const thisButtonId = document.createElement("div")
        thisButtonId.id = "thisButtonId"
        // thisButtonId.classList.add("themeTextColor")
        thisButtonId.innerText = "setup"

        const logRecdCnt = document.createElement("div")
        logRecdCnt.id = "logRecdCnt"
        logRecdCnt.innerText = "-1"

        const devType = document.createElement("div")
        devType.id = "devType"
        devType.innerText = ""

        const hdrCellWidth = document.createElement("div")
        hdrCellWidth.id = "hdrCellWidth"
        hdrCellWidth.innerText = "0,66.67Px,92.22px,90px,76.67px,65.56px,67.22px"
        // hdrCellWidth.innerText = "0,60.410Px,79.8036px,78.25px,64.6339px,56.8661px,46.0357px"
        // hdrCellWidth.innerText = "0,66.7px,97.8px,94.4px,80px,70px,66.7px"

        const aboutVersion = document.createElement("div")
        aboutVersion.id = "aboutVersion"
        aboutVersion.innerText = version

        const versionSentFlag = document.createElement("div")
        versionSentFlag.id = "versionSentFlag"
        versionSentFlag.innerText = -1

        const displayUserMsgFlag = document.createElement("div")
        displayUserMsgFlag.id = "displayUserMsgFlag"
        displayUserMsgFlag.innerText = 'true'

        const infoText = document.createElement("div")
        infoText.id = "infoText"
        infoText.classList.add("lightgray")


        // Button Bar
        const buttonBar = document.createElement("div")
        buttonBar.id = "buttonBar"
        buttonBar.class = "buttonBar"

        // Name Buttons
        const btnName0 = document.createElement('btnName')
        btnName0.id = "btnName0"
        btnName0.classList.add("btnBaseFormat")
        btnName0.innerText = "Setup"
        const btnName1 = document.createElement('btnName')
        btnName1.id = "btnName1"
        btnName1.classList.add("btnBaseFormat")
        btnName1.classList.add("btnHidden")
        const btnName2 = document.createElement('btnName')
        btnName2.id = "btnName2"
        btnName2.classList.add("btnBaseFormat")
        btnName2.classList.add("btnHidden")
        const btnName3 = document.createElement('btnName')
        btnName3.id = "btnName3"
        btnName3.classList.add("btnBaseFormat")
        btnName3.classList.add("btnHidden")
        const btnName4 = document.createElement('btnName')
        btnName4.id = "btnName4"
        btnName4.classList.add("btnBaseFormat")
        btnName4.classList.add("btnHidden")
        const btnName5 = document.createElement('btnName')
        btnName5.id = "btnName5"
        btnName5.classList.add("btnBaseFormat")
        btnName5.classList.add("btnHidden")
        const btnName6 = document.createElement('btnName')
        btnName6.id = "btnName6"
        btnName6.classList.add("btnBaseFormat")
        btnName6.classList.add("btnHidden")
        const btnName7 = document.createElement('btnName')
        btnName7.id = "btnName7"
        btnName7.classList.add("btnBaseFormat")
        btnName7.classList.add("btnHidden")
        const btnName8 = document.createElement('btnName')
        btnName8.id = "btnName8"
        btnName8.classList.add("btnBaseFormat")
        btnName8.classList.add("btnHidden")
        const btnName9 = document.createElement('btnName')
        btnName9.id = "btnName9"
        btnName9.classList.add("btnBaseFormat")
        btnName9.classList.add("btnHidden")

        /* Action Select Box */
        const btnAction = document.createElement('select')
        btnAction.id = "btnAction"
        btnAction.setDefault
        btnAction.classList.add("btnBaseFormat")
        btnAction.classList.add("btnAction")

        var btnActionGenActions = document.createElement("option")
        var btnActionGenActionsTxt = document.createTextNode("Actions")
        btnActionGenActions.setAttribute("value", "action")
        btnActionGenActions.setAttribute("id", "optAction")
        btnActionGenActions.classList.add("btnActionOptionTransparent")
        btnActionGenActions.appendChild(btnActionGenActionsTxt)
        btnAction.appendChild(btnActionGenActions)

        var btnActionGrpGen = document.createElement("optGroup")
        btnActionGrpGen.setAttribute("label", "Global Actions")
        btnActionGrpGen.classList.add("btnActionOptionGroup")
        btnAction.appendChild(btnActionGrpGen)

        var btnActionGenRestart = document.createElement("option")
        var btnActionGenRestartTxt = document.createTextNode("Restart iCloud3")
        btnActionGenRestart.setAttribute("value", "restart")
        btnActionGenRestart.setAttribute("text-align", "left")
        btnActionGenRestart.classList.add("btnActionOption")
        btnActionGenRestart.appendChild(btnActionGenRestartTxt)
        btnAction.appendChild(btnActionGenRestart)

        var btnActionGenPause = document.createElement("option")
        var btnActionGenPauseTxt = document.createTextNode("Pause All Tracking")
        btnActionGenPause.setAttribute("value", "pause")
        btnActionGenPause.classList.add("btnActionOption")
        btnActionGenPause.appendChild(btnActionGenPauseTxt)
        btnAction.appendChild(btnActionGenPause)

        var btnActionGenResume = document.createElement("option")
        var btnActionGenResumeTxt = document.createTextNode("Resume All Tracking")
        btnActionGenResume.setAttribute("value", "resume")
        btnActionGenResume.classList.add("btnActionOption")
        btnActionGenResume.appendChild(btnActionGenResumeTxt)
        btnAction.appendChild(btnActionGenResume)

        var btnActionGenLoc = document.createElement("option")
        var btnActionGenLocTxt = document.createTextNode("Locate All Devices using iCloud")
        btnActionGenLoc.setAttribute("value", "locate")
        btnActionGenLoc.classList.add("btnActionOption")
        btnActionGenLoc.appendChild(btnActionGenLocTxt)
        btnAction.appendChild(btnActionGenLoc)

        var btnActionGenMobRqst = document.createElement("option")
        var btnActionGenMobRqstTxt = document.createTextNode("Send Locate Requests to Mobile App")
        btnActionGenMobRqst.setAttribute("value", "location")
        btnActionGenMobRqst.classList.add("btnActionOption")
        btnActionGenMobRqst.appendChild(btnActionGenMobRqstTxt)
        btnAction.appendChild(btnActionGenMobRqst)


        //---------------------------------------------------------
        var btnActionDevGrp = document.createElement("optGroup")
        btnActionDevGrp.setAttribute("label", "Selected Device")
        btnActionDevGrp.classList.add("btnActionOptionGroup")
        btnAction.appendChild(btnActionDevGrp)

        var btnActionDevPause = document.createElement("option")
        var btnActionDevPauseTxt = document.createTextNode("Pause Tracking this Device")
        btnActionDevPause.setAttribute("value", "dev-pause")
        btnActionDevPause.classList.add("btnActionOption")
        btnActionDevPause.appendChild(btnActionDevPauseTxt)
        btnAction.appendChild(btnActionDevPause)

        var btnActionDevResume = document.createElement("option")
        var btnActionDevResumeTxt = document.createTextNode("Resume Tracking this Device")
        btnActionDevResume.setAttribute("value", "dev-resume")
        btnActionDevResume.classList.add("btnActionOption")
        btnActionDevResume.appendChild(btnActionDevResumeTxt)
        btnAction.appendChild(btnActionDevResume)

        var btnActionDevLoc = document.createElement("option")
        var btnActionDevLocTxt = document.createTextNode("Locate this Device using iCloud")
        btnActionDevLoc.setAttribute("value", "dev-locate")
        btnActionDevLoc.classList.add("btnActionOption")
        btnActionDevLoc.appendChild(btnActionDevLocTxt)
        btnAction.appendChild(btnActionDevLoc)

        var btnActionDevMobRqst = document.createElement("option")
        var btnActionDevMobRqstTxt = document.createTextNode("Send Locate Request to Mobile App")
        btnActionDevMobRqst.setAttribute("value", "dev-location")
        btnActionDevMobRqst.classList.add("btnActionOption")
        btnActionDevMobRqst.appendChild(btnActionDevMobRqstTxt)
        btnAction.appendChild(btnActionDevMobRqst)

        var btnActionDevFind = document.createElement("option")
        var btnActionDevFindTxt = document.createTextNode("Send Find-My-iPhone Alert to iCloud")
        btnActionDevFind.setAttribute("value", "dev-find-iphone-alert")
        btnActionDevFind.classList.add("btnActionOption")
        btnActionDevFind.appendChild(btnActionDevFindTxt)
        btnAction.appendChild(btnActionDevFind)

        // var btnActionDevLostLost = document.createElement("option")
        // var btnActionDevLostLostTxt = document.createTextNode("Send Lost-Device Alert to iCloud")
        // btnActionDevLostLost.setAttribute("value", "dev-lost-device-alert")
        // btnActionDevLostLost.classList.add("btnActionOption")
        // btnActionDevLostLost.appendChild(btnActionDevLostLostTxt)
        // btnAction.appendChild(btnActionDevLostLost)

        var btnActionOptOC = document.createElement("optGroup")
        btnActionOptOC.setAttribute("label", "Other Commands")
        btnActionOptOC.classList.add("btnActionOptionGroup")
        btnAction.appendChild(btnActionOptOC)

        var btnActionOptOC1 = document.createElement("option")
        var btnActionOptOC1Txt = document.createTextNode("Export Event Log")
        btnActionOptOC1.setAttribute("value", "dev-export_event_log")
        btnActionOptOC1.classList.add("btnActionOption")
        btnActionOptOC1.appendChild(btnActionOptOC1Txt)
        btnAction.appendChild(btnActionOptOC1)

        var btnActionOptOC2 = document.createElement("option")
        var btnActionOptOC2Txt = document.createTextNode("Show Tracking Monitors")
        btnActionOptOC2.setAttribute("value", "dev-log_level: monitor")
        btnActionOptOC2.setAttribute("id", "optMonitor")
        btnActionOptOC2.classList.add("btnActionOption")
        btnActionOptOC2.appendChild(btnActionOptOC2Txt)
        btnAction.appendChild(btnActionOptOC2)

        var btnActionOptOC3 = document.createElement("option")
        var btnActionOptOC3Txt = document.createTextNode("Show Startup Log, Errors and Alerts")
        btnActionOptOC3.setAttribute("value", "dev-refresh_event_log")
        btnActionOptOC3.setAttribute("id", "optStartuplog")
        btnActionOptOC3.classList.add("btnActionOption")
        btnActionOptOC3.appendChild(btnActionOptOC3Txt)
        btnAction.appendChild(btnActionOptOC3)

        var btnActionOptOC4 = document.createElement("option")
        var btnActionOptOC4Txt = document.createTextNode("Start Debug Logging")
        btnActionOptOC4.setAttribute("value", "dev-log_level: debug")
        btnActionOptOC4.setAttribute("id", "optDebug")
        btnActionOptOC4.classList.add("btnActionOption")
        btnActionOptOC4.appendChild(btnActionOptOC4Txt)
        btnAction.appendChild(btnActionOptOC4)

        var btnActionOptOC5 = document.createElement("option")
        var btnActionOptOC5Txt = document.createTextNode("Start Rawdata Logging")
        btnActionOptOC5.setAttribute("value", "dev-log_level: rawdata")
        btnActionOptOC5.setAttribute("id", "optRawdata")
        btnActionOptOC5.classList.add("btnActionOption")
        btnActionOptOC5.appendChild(btnActionOptOC5Txt)
        btnAction.appendChild(btnActionOptOC5)

        var btnActionOptOC8 = document.createElement("option")
        var btnActionOptOC8Txt = document.createTextNode("WazeHist-Recalculate Route Time/Dist")
        btnActionOptOC8.setAttribute("value", "wazehist_maint")
        btnActionOptOC8.setAttribute("id", "optWazeHistMaint")
        btnActionOptOC8.classList.add("btnActionOption")
        btnActionOptOC8.appendChild(btnActionOptOC8Txt)
        btnAction.appendChild(btnActionOptOC8)

        var btnActionOptOC7 = document.createElement("option")
        var btnActionOptOC7Txt = document.createTextNode("WazeHist-Load Track Locations for Map")
        btnActionOptOC7.setAttribute("value", "wazehist_track")
        btnActionOptOC7.setAttribute("id", "optWazeHistTrack")
        btnActionOptOC7.classList.add("btnActionOption")
        btnActionOptOC7.appendChild(btnActionOptOC7Txt)
        btnAction.appendChild(btnActionOptOC7)

        // var btnActionOptOC6 = document.createElement("option")
        // var btnActionOptOC6Txt = document.createTextNode("Request Apple ID Verification Code")
        // btnActionOptOC6.setAttribute("value", "reset_session")
        // btnActionOptOC6.setAttribute("id", "optResetPyicloud")
        // btnActionOptOC6.classList.add("btnActionOption")
        // btnActionOptOC6.appendChild(btnActionOptOC6Txt)
        // btnAction.appendChild(btnActionOptOC6)

        var btnActionOptVer = document.createElement("optGroup")
        btnActionOptVer.setAttribute("label", "Version Information")
        btnActionOptVer.classList.add("btnActionOptionGroup")
        btnAction.appendChild(btnActionOptVer)

        var btnActioniC3Version = document.createElement("option")
        var btnActioniC3VersionTxt = document.createTextNode(" • iCloud3 v?.? (Installed & Running)")
        btnActioniC3Version.classList.add("btnActionOption")
        btnActioniC3Version.setAttribute("id", "optiC3Version")
        btnActioniC3Version.appendChild(btnActioniC3VersionTxt)
        btnAction.appendChild(btnActioniC3Version)

        var btnActionEvLogLatest = document.createElement("option")
        var btnActionEvLogLatestTxt = document.createTextNode(" • EvLog... v?.??.?? (Latest-iC3/EvLog dir)")
        btnActionEvLogLatest.classList.add("btnActionOption")
        btnActionEvLogLatest.setAttribute("id", "optEvLogLatest")
        btnActionEvLogLatest.appendChild(btnActionEvLogLatestTxt)
        btnAction.appendChild(btnActionEvLogLatest)

        var btnActionEvLogRunning = document.createElement("option")
        var btnActionEvLogRunningTxt = document.createTextNode(" • EvLog... v" + version + " (Running-HA/www dir)")
        btnActionEvLogRunning.classList.add("btnActionOption")
        btnActionEvLogRunning.setAttribute("id", "optEvLogRunning")
        btnActionEvLogRunning.appendChild(btnActionEvLogRunningTxt)
        btnAction.appendChild(btnActionEvLogRunning)


        //-------------------------------------------------------------
        // SVG Icons source -- https://heroicons.com/
        // SVG Icons source -- https://www.svgrepo.com/svg/103159/refreshing?edit=true

        // https://www.svgrepo.com/svg/506675/refresh?edit=true
        const btnRefresh = document.createElement('btnRefresh')
        btnRefresh.id = "btnRefresh"
        btnRefresh.classList.add("btnRefresh")
        btnRefresh.innerHTML = `<svg width="24px" height="24px" viewBox="-3.2 -3.2 38.40 38.40"  fill="#ffffff" stroke="#ffffff" stroke-width="0">
        <g stroke-width="0"><rect x="-3.2" y="-3.2" width="38.40" height="38.40" rx="19.2" fill="#309023" strokewidth="0"></rect></g>
        <g stroke-linecap="round" stroke-linejoin="round" stroke="#ffffff" stroke-width="0"></g>
        <g><path d="M27.1 14.313V5.396L24.158 8.34c-2.33-2.325-5.033-3.503-8.11-3.503C9.902 4.837 4.901 9.847 4.899 16c.001 6.152 5.003 11.158 11.15 11.16 4.276 0 9.369-2.227 10.836-8.478l.028-.122h-3.23l-.022.068c-1.078 3.242-4.138 5.421-7.613 5.421a8 8 0 0 1-5.691-2.359A7.993 7.993 0 0 1 8 16.001c0-4.438 3.611-8.049 8.05-8.049 2.069 0 3.638.58 5.924 2.573l-3.792 3.789H27.1z"></path></g></svg>`

        // https://www.svgrepo.com/svg/493714/question-help-ask-mark-sign?edit=true
        const btnHelp = document.createElement('A')
        btnHelp.id = "btnHelp"
        btnHelp.classList.add("btnHelp")
        btnHelp.setAttribute('href', 'https://gcobb321.github.io/icloud3_v3_docs/#/')
        btnHelp.setAttribute('target', '_blank')
        btnHelp.innerHTML = `<svg fill="#ffffff" width="24px" height="24px" viewBox="-3.84 -3.84 71.68 71.68" version="1.1" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;" stroke="#ffffff" stroke-width="0.00064">
        <g stroke-width="0"><rect x="-3.84" y="-3.84" width="71.68" height="71.68" rx="35.84" fill="#316ce3" strokewidth="0"></rect></g>
        <g stroke-linecap="round" stroke-linejoin="round" stroke="#fcfcfc" stroke-width="1.28">
        <rect x="-640" y="-192" width="1280" height="800" style="fill:none;"></rect>
        <path d="M27.952,42.387c0.043,-2.56 0.333,-4.583 0.871,-6.068c0.538,-1.485 1.636,-3.131 3.293,-4.939l4.229,-4.358c1.807,-2.044 2.711,-4.239 2.711,-6.585c0,-2.259 -0.592,-4.029 -1.775,-5.31c-1.184,-1.28 -2.905,-1.92 -5.165,-1.92c-2.195,0 -3.96,0.581 -5.294,1.743c-1.334,1.162 -2.001,2.722 -2.001,4.68l-5.972,0c0.043,-3.486 1.286,-6.3 3.728,-8.441c2.443,-2.141 5.622,-3.212 9.539,-3.212c4.067,0 7.236,1.092 9.506,3.277c2.271,2.184 3.406,5.181 3.406,8.99c0,3.765 -1.743,7.478 -5.229,11.136l-3.519,3.486c-1.571,1.743 -2.356,4.25 -2.356,7.521l-5.972,0Zm-0.258,10.233c0,-0.968 0.296,-1.781 0.887,-2.437c0.592,-0.656 1.469,-0.985 2.631,-0.985c1.162,0 2.045,0.329 2.647,0.985c0.603,0.656 0.904,1.469 0.904,2.437c0,0.969 -0.301,1.77 -0.904,2.405c-0.602,0.635 -1.485,0.952 -2.647,0.952c-1.162,0 -2.039,-0.317 -2.631,-0.952c-0.591,-0.635 -0.887,-1.436 -0.887,-2.405Z" style="fill-rule:nonzero;"></path>
        <g><rect id="Icons" x="-640" y="-192" width="1280" height="800" style="fill:none;"></rect>
        <g><path d="M27.952,42.387c0.043,-2.56 0.333,-4.583 0.871,-6.068c0.538,-1.485 1.636,-3.131 3.293,-4.939l4.229,-4.358c1.807,-2.044 2.711,-4.239 2.711,-6.585c0,-2.259 -0.592,-4.029 -1.775,-5.31c-1.184,-1.28 -2.905,-1.92 -5.165,-1.92c-2.195,0 -3.96,0.581 -5.294,1.743c-1.334,1.162 -2.001,2.722 -2.001,4.68l-5.972,0c0.043,-3.486 1.286,-6.3 3.728,-8.441c2.443,-2.141 5.622,-3.212 9.539,-3.212c4.067,0 7.236,1.092 9.506,3.277c2.271,2.184 3.406,5.181 3.406,8.99c0,3.765 -1.743,7.478 -5.229,11.136l-3.519,3.486c-1.571,1.743 -2.356,4.25 -2.356,7.521l-5.972,0Zm-0.258,10.233c0,-0.968 0.296,-1.781 0.887,-2.437c0.592,-0.656 1.469,-0.985 2.631,-0.985c1.162,0 2.045,0.329 2.647,0.985c0.603,0.656 0.904,1.469 0.904,2.437c0,0.969 -0.301,1.77 -0.904,2.405c-0.602,0.635 -1.485,0.952 -2.647,0.952c-1.162,0 -2.039,-0.317 -2.631,-0.952c-0.591,-0.635 -0.887,-1.436 -0.887,-2.405Z" style="fill-rule:nonzero;"></path>
        </g> </g> </g></svg>`

        const btnIssues = document.createElement('A')
        btnIssues.id = "btnIssues"
        btnIssues.classList.add("btnIssues")
        btnIssues.setAttribute('href', 'https://github.com/gcobb321/icloud3_v3/issues')
        btnIssues.setAttribute('target', '_blank')
        btnIssues.innerHTML = `<svg height="24px" width="24px" viewBox="0 0 480 480" xml:space="preserve" fill="#ffffff" stroke="#ffffff"><g stroke-width="0"></g>
        <g stroke-linecap="round" stroke-linejoin="round"></g>
        <g><circle style="fill:#e65151;" cx="236.966" cy="236.966" r="236.966"></circle>
        <g><path style="fill:#ffffff;" d="M201.542,162.98c0-20.898,17.092-31.214,38.177-31.214c21.085,0,38.173,10.316,38.173,31.214 c0,0.442-0.008,23.495-0.026,23.936l-76.306-0.187C201.55,186.351,201.542,163.358,201.542,162.98z"></path>
        <path style="fill:#ffffff;" d="M329.185,200.678h-19.738c-2.904,0-5.261-2.357-5.261-5.261c0-2.907,2.357-5.261,5.261-5.261h14.473 V161.21c0-1.399,0.554-2.731,1.542-3.723c0,0,31.696-28.366,33.754-26.312c2.054,2.054-24.77,32.213-24.77,32.213v32.029 C334.45,198.321,332.089,200.678,329.185,200.678z"></path>
        <path style="fill:#ffffff;" d="M372.604,273.04c-1.56,0-3.106-0.696-4.138-2.013l-27.363-34.828h-29.025 c-2.904,0-5.261-2.354-5.261-5.261s2.357-5.265,5.261-5.265h31.577c1.613,0,3.143,0.745,4.138,2.013l25.788,32.823 c0,0,26.525-16.617,28.25-14.275c1.721,2.339-26.114,25.777-26.114,25.777C374.782,272.703,373.69,273.04,372.604,273.04z"></path>
        <path style="fill:#ffffff;" d="M341.611,336.291c-1.126-0.935-1.811-2.297-1.893-3.76l-2.481-44.534l-29.122-16.991 c-2.511-1.463-3.356-4.685-1.893-7.199c1.467-2.511,4.677-3.356,7.195-1.89l31.573,18.417c1.53,0.891,2.503,2.492,2.604,4.254 l2.503,45.069c0,0,46.828,41.859,44.976,44.097C394.03,375.01,341.611,336.291,341.611,336.291z"></path>
        <path style="fill:#ffffff;" d="M171.305,200.678h-19.734c-2.9,0-5.261-2.357-5.261-5.261v-32.029c0,0-26.825-30.159-24.77-32.213 c2.062-2.054,33.754,26.312,33.754,26.312c0.992,0.988,1.542,2.324,1.542,3.723v28.946h14.473c2.907,0,5.265,2.354,5.265,5.261 C176.57,198.321,174.213,200.678,171.305,200.678z"></path>
        <path style="fill:#ffffff;" d="M108.156,273.04c-1.089,0-2.181-0.333-3.124-1.029c0,0-27.831-23.438-26.11-25.777 c1.717-2.335,28.25,14.275,28.25,14.275l25.788-32.823c0.999-1.268,2.529-2.013,4.138-2.013h31.573 c2.907,0,5.265,2.357,5.265,5.265s-2.357,5.261-5.265,5.261h-29.017l-27.363,34.828C111.258,272.344,109.712,273.04,108.156,273.04 z"></path>
        <path style="fill:#ffffff;" d="M85.679,373.753c-1.845-2.241,44.98-44.097,44.98-44.097l2.499-45.069 c0.101-1.762,1.078-3.364,2.604-4.254l31.573-18.417c2.522-1.467,5.732-0.621,7.199,1.89c1.471,2.514,0.621,5.736-1.89,7.199 l-29.126,16.991l-2.481,44.534c-0.079,1.463-0.767,2.825-1.893,3.76C139.145,336.291,86.727,375.01,85.679,373.753z"></path>
        <path style="fill:#ffffff;" d="M312.65,292.68c0,47.277-32.658,85.608-72.931,85.608s-72.927-38.334-72.927-85.608 c0-1.007,0.011-110.532,0.041-111.531l145.79,0.43C312.643,182.433,312.65,291.82,312.65,292.68z"></path> </g>
        <path style="fill:#ffffff;" d="M314.267,181.707c-0.015-0.7-0.475-1.313-1.141-1.527c-0.427-0.135-42.637-13.665-75.512-13.665 c-32.886,0-70.948,13.164-71.329,13.291c-0.64,0.228-1.078,0.831-1.104,1.512c-0.03,0.928-0.045,99.299-0.045,100.287 c0,43.341,33.459,78.599,74.585,78.599s74.585-35.259,74.585-78.599C314.304,280.621,314.289,182.504,314.267,181.707z"></path>
        <path style="fill:#ffffff;" d="M237.617,166.516c-32.886,0-70.948,13.164-71.329,13.291c-0.64,0.228-1.078,0.831-1.104,1.512 c-0.03,0.928-0.045,99.299-0.045,100.287c0,43.341,33.459,78.599,74.585,78.599L237.617,166.516z"></path>
        <path style="fill:#ffffff;" d="M243.667,370.509c0,2.178-1.766,3.948-3.948,3.948l0,0c-2.181,0-3.948-1.77-3.948-3.948 c0,0,1.766-97.911,3.948-97.911l0,0C241.901,272.598,243.667,370.509,243.667,370.509z"></path>
        <g>
        <path style="fill:#ffffff;" d="M264.273,155.508c-0.898,0-1.818-0.236-2.657-0.73c-2.503-1.471-3.349-4.688-1.871-7.195 c1.508-2.574,37.53-62.993,88.01-65.743c2.836-0.165,5.384,2.065,5.542,4.973c0.165,2.9-2.069,5.381-4.962,5.538 c-44.823,2.447-79.172,59.98-79.512,60.56C267.835,154.58,266.077,155.508,264.273,155.508z"></path>
        <circle style="fill:#ffffff;" cx="348.059" cy="87.089" r="7.891"></circle>
        <path style="fill:#ffffff;" d="M217.363,155.508c-1.804,0-3.562-0.928-4.546-2.597c-0.34-0.58-34.69-58.113-79.516-60.56 c-2.892-0.157-5.119-2.642-4.965-5.538c0.161-2.907,2.634-5.137,5.549-4.973c50.476,2.75,86.498,63.168,88.01,65.743 c1.474,2.503,0.632,5.725-1.875,7.195C219.185,155.272,218.264,155.508,217.363,155.508z"></path>
        <circle style="fill:#ffffff;" cx="130.524" cy="87.089" r="7.891"></circle> </g> </g></svg>`

        const btnBuyMeACoffee = document.createElement('A')
        btnBuyMeACoffee.id = "btnBuyMeACoffee"
        btnBuyMeACoffee.classList.add("btnBuyMeACoffee")
        btnBuyMeACoffee.setAttribute('href', 'https://buymeacoffee.com/gcobb321')
        btnBuyMeACoffee.setAttribute('target', '_blank')
        btnBuyMeACoffee.innerHTML = `<svg height="24px" width="24px" version="1.1" viewBox="-74 -74 444.00 444.00" xml:space="preserve" fill="#000000">
        <g stroke-width="0"><rect x="-74" y="-74" width="444.00" height="444.00" rx="222" fill="#f5c26b" strokewidth="0"></rect></g>
        <g stroke-linecap="round" stroke-linejoin="round"></g>
        <g><path d="M290.664,148.038c-5.78-10.667-15.653-18.438-27.799-21.882c-4.126-1.17-8.375-1.764-12.629-1.764 c-7.386,0-14.474,1.792-20.789,4.997c0.021-3.326,0.004-6.442-0.013-9.328c-0.01-1.766-0.02-3.454-0.02-5.061c0-4.418-3.582-8-8-8 H8.042c-4.418,0-8,3.582-8,8c0,1.606-0.01,3.295-0.02,5.061c-0.179,31.228-0.512,89.354,50.826,150.104 c1.521,1.798,3.756,2.836,6.11,2.836h115.539c2.355,0,4.59-1.038,6.11-2.836c4.799-5.678,9.145-11.334,13.083-16.946 c10.572-1.611,85.224-14.84,101.98-68.771C297.602,171.8,296.533,158.869,290.664,148.038z M60.71,257.001 c-43.783-53.478-44.84-103.064-44.703-134H213.45c0.137,30.935-0.92,80.522-44.703,134H60.71z M278.393,179.699 c-10.523,33.866-52.082,48.877-74.857,54.675c17.735-31.75,23.395-61.319,25.152-84.879c5.563-5.662,13.268-9.103,21.548-9.103 c2.778,0,5.559,0.39,8.264,1.156c7.962,2.258,14.389,7.27,18.097,14.112C280.449,162.77,281.07,171.082,278.393,179.699z"></path> <path style="fill:#A56905;" d="M213.45,123.001H16.007c-0.137,30.935,0.92,80.522,44.703,134h108.037 C212.53,203.522,213.587,153.936,213.45,123.001z"></path>
        <path d="M72.729,82.001c0,4.418,3.582,8,8,8s8-3.582,8-8c0-2.462,0.414-3.341,1.238-5.094c1.166-2.477,2.762-5.868,2.762-11.907 c0-6.039-1.596-9.431-2.762-11.907c-0.824-1.753-1.238-2.632-1.238-5.094c0-2.461,0.414-3.341,1.238-5.093 c1.166-2.476,2.762-5.867,2.762-11.905c0-4.418-3.582-8-8-8s-8,3.582-8,8c0,2.461-0.414,3.341-1.238,5.093 c-1.166,2.476-2.762,5.867-2.762,11.905c0,6.038,1.596,9.43,2.762,11.906c0.824,1.753,1.238,2.632,1.238,5.095 c0,2.462-0.414,3.342-1.238,5.095C74.324,72.571,72.729,75.963,72.729,82.001z"></path> <path d="M104.729,82.001c0,4.418,3.582,8,8,8s8-3.582,8-8c0-2.462,0.414-3.341,1.238-5.094c1.166-2.477,2.762-5.868,2.762-11.907 c0-6.039-1.596-9.431-2.762-11.907c-0.824-1.753-1.238-2.632-1.238-5.094c0-2.461,0.414-3.341,1.238-5.093 c1.166-2.476,2.762-5.867,2.762-11.905c0-4.418-3.582-8-8-8s-8,3.582-8,8c0,2.461-0.414,3.341-1.238,5.093 c-1.166,2.476-2.762,5.867-2.762,11.905c0,6.038,1.596,9.43,2.762,11.906c0.824,1.753,1.238,2.632,1.238,5.095 c0,2.462-0.414,3.342-1.238,5.095C106.324,72.571,104.729,75.963,104.729,82.001z"></path> <path d="M136.729,82.001c0,4.418,3.582,8,8,8s8-3.582,8-8c0-2.462,0.414-3.341,1.238-5.094c1.166-2.477,2.762-5.868,2.762-11.907 c0-6.039-1.596-9.431-2.762-11.907c-0.824-1.753-1.238-2.632-1.238-5.094c0-2.461,0.414-3.341,1.238-5.093 c1.166-2.476,2.762-5.867,2.762-11.905c0-4.418-3.582-8-8-8s-8,3.582-8,8c0,2.461-0.414,3.341-1.238,5.093 c-1.166,2.476-2.762,5.867-2.762,11.905c0,6.038,1.596,9.43,2.762,11.906c0.824,1.753,1.238,2.632,1.238,5.095 c0,2.462-0.414,3.342-1.238,5.095C138.324,72.571,136.729,75.963,136.729,82.001z"></path></g></svg>`

        const btnConfig = document.createElement('A')
        btnConfig.id = "btnConfig"
        btnConfig.classList.add("btnConfig")
        btnConfig.setAttribute('href', 'http://10.0.2.201:8123/config/integrations/integration/icloud3')
        btnConfig.setAttribute('target', '_self')
        btnConfig.innerHTML = `<svg width="24" height="24" viewBox="0 0 64 64" stroke="#bd5dd5" stroke-width="0">
        <defs><path id="a" d="M.06 64H64V.04H.06z"></path></defs>
        <g fill="none" fill-rule="evenodd">
        <path fill="#FFFFFE" d="M32 42c-5.522 0-10-4.478-10-10s4.478-10 10-10 10 4.478 10 10-4.478 10-10 10zm20.918-12.758l-4.128-1.469c-.518-.184-1.089-.76-1.27-1.28l-.652-1.58c-.238-.496-.24-1.308-.004-1.805l1.875-3.944c.236-.497.129-1.238-.238-1.648l-2.017-2.017c-.41-.367-1.151-.474-1.648-.238l-3.944 1.875c-.497.236-1.309.234-1.805-.004l-1.58-.652c-.52-.18-1.096-.752-1.28-1.27l-1.469-4.128c-.184-.518-.784-.981-1.331-1.029 0 0-.608-.053-1.427-.053-.819 0-1.427.053-1.427.053-.548.048-1.147.511-1.331 1.029l-1.469 4.128c-.184.518-.76 1.09-1.28 1.271l-1.577.651c-.496.238-1.308.24-1.805.004l-3.947-1.875c-.497-.236-1.238-.129-1.648.238l-2.017 2.017c-.367.41-.474 1.151-.238 1.648l1.875 3.944c.236.497.235 1.309-.004 1.805l-.652 1.58c-.18.52-.752 1.096-1.27 1.28l-4.128 1.469c-.518.184-.981.783-1.029 1.331 0 0-.053.608-.053 1.427 0 .819.053 1.426.053 1.426.048.548.511 1.147 1.029 1.332l4.13 1.469c.518.184 1.09.76 1.271 1.28l.652 1.58c.238.496.24 1.308.004 1.805l-1.875 3.944c-.236.497-.129 1.238.238 1.648l2.017 2.017c.41.367 1.151.474 1.648.238l3.944-1.875c.497-.236 1.309-.234 1.805.004l1.58.652c.519.18 1.095.752 1.28 1.27l1.469 4.13c.184.518.783.981 1.331 1.028 0 0 .605.052 1.424.052s1.427-.053 1.427-.053c.547-.048 1.147-.511 1.331-1.029l1.469-4.13c.184-.518.76-1.09 1.28-1.271l1.58-.652c.496-.238 1.308-.24 1.805-.004l3.944 1.875c.497.236 1.238.129 1.648-.238l2.017-2.017c.367-.41.474-1.151.238-1.648l-1.875-3.944c-.236-.497-.234-1.309.004-1.804l.652-1.581c.18-.519.752-1.095 1.27-1.28l4.13-1.469c.518-.184.981-.783 1.028-1.331 0 0 .052-.605.052-1.424s-.053-1.427-.053-1.427c-.048-.548-.511-1.147-1.029-1.331z"></path>
        <path fill="#ffffff" d="M32 27.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9"></path>
        <mask id="b" fill="#ffffff"><use xlink:href="#a"></use></mask>
        <path fill="#bd5dd5" d="M32 36.5a4.5 4.5 0 1 1 0-9 4.5 4.5 0 0 1 0 9zM32 22c-5.522 0-10 4.478-10 10s4.478 10 10 10 10-4.478 10-10-4.478-10-10-10z" mask="url(#b)"></path>
        <path fill="#bd5dd5" d="M53.948 33.424c-.047.548-.51 1.147-1.028 1.331l-4.13 1.469c-.518.185-1.09.761-1.27 1.28l-.652 1.581c-.238.495-.24 1.307-.004 1.804l1.875 3.944c.236.497.129 1.238-.238 1.648l-2.017 2.017c-.41.367-1.151.474-1.648.238l-3.944-1.875c-.497-.236-1.309-.234-1.805.004l-1.58.652c-.52.181-1.096.753-1.28 1.271l-1.469 4.13c-.184.518-.784.981-1.331 1.029 0 0-.608.053-1.427.053-.819 0-1.424-.052-1.424-.052-.548-.047-1.147-.51-1.331-1.028l-1.469-4.13c-.185-.518-.761-1.09-1.28-1.27l-1.58-.652c-.496-.238-1.308-.24-1.805-.004l-3.944 1.875c-.497.236-1.238.129-1.648-.238l-2.017-2.017c-.367-.41-.474-1.151-.238-1.648l1.875-3.944c.236-.497.234-1.309-.004-1.805l-.652-1.58c-.181-.52-.753-1.096-1.271-1.28l-4.13-1.469c-.518-.185-.981-.784-1.029-1.332 0 0-.053-.607-.053-1.426s.053-1.427.053-1.427c.048-.548.511-1.147 1.029-1.331l4.128-1.469c.518-.184 1.09-.76 1.27-1.28l.652-1.58c.239-.496.24-1.308.004-1.805l-1.875-3.944c-.236-.497-.129-1.238.238-1.648l2.017-2.017c.41-.367 1.151-.474 1.648-.238l3.947 1.875c.497.236 1.309.234 1.805-.004l1.577-.651c.52-.181 1.096-.753 1.28-1.271l1.469-4.128c.184-.518.783-.981 1.331-1.029 0 0 .608-.053 1.427-.053.819 0 1.427.053 1.427.053.547.048 1.147.511 1.331 1.029l1.469 4.128c.184.518.76 1.09 1.28 1.27l1.58.652c.496.238 1.308.24 1.805.004l3.944-1.875c.497-.236 1.238-.129 1.648.238l2.017 2.017c.367.41.474 1.151.238 1.648l-1.875 3.944c-.236.497-.234 1.309.004 1.805l.652 1.58c.181.52.752 1.096 1.27 1.28l4.128 1.469c.518.184.981.783 1.029 1.331 0 0 .053.608.053 1.427 0 .819-.052 1.424-.052 1.424zM32 0C14.327 0 0 14.327 0 32c0 17.673 14.327 32 32 32 17.673 0 32-14.327 32-32C64 14.327 49.673 0 32 0z" mask="url(#b)"></path></g></svg>`

        const btnHeart = document.createElement('A')
        btnHeart.id = "btnHeart"
        btnHeart.classList.add("btnHeart")
        btnHeart.setAttribute('href', 'https://github.com/gcobb321/icloud3_v3/stargazers')
        btnHeart.setAttribute('target', '_blank')
        btnHeart.innerHTML = `<svg fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="#000000">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z" stroke="#8b008b"/></svg>`

        // Message Bar
        const statusBar = document.createElement("div")
        statusBar.id = "statusBar"

        const statusName = document.createElement("div")
        statusName.id = "statusName"
        statusName.innerText = "Select Person"
        statusName.style.color = "firebrick"

        const statusTime = document.createElement("div")
        statusTime.id = "statusTime"
        statusTime.innerText = "setup"
        statusTime.style.color = "firebrick"

        const statusMsgPopup = document.createElement("div")
        statusMsgPopup.id = "statusMsgPopup"
        statusMsgPopup.innerText = ""
        statusMsgPopup.classList.add("statusMsgPopupHidden")
        statusMsgPopup.style.setProperty('zIndex', '9999')

        //Event Table
        const tblEvlogContainer = document.createElement("div")
        tblEvlogContainer.id = "tblEvlogContainer"

        const tblEvlog = document.createElement("TABLE")
        tblEvlog.id = "tblEvlog"
        tblEvlog.classList.add("tblEvlog")

        const tblEvlogHdr = document.createElement("TH")
        tblEvlogHdr.id = "tblEvlogHdr"
        tblEvlogHdr.classList.add("tblEvlogHeader")

        const tblEvlogBody = document.createElement("BODY")
        tblEvlogBody.id = "tblEvlogBody"
        tblEvlogBody.classList.add("tblEvlogBody")

        // Style
        const cssStyle = document.createElement('style')
        cssStyle.textContent = `
            /* Text special colors */
            .blue               {color: blue;}
            .teal               {color: teal;}
            .darkgray           {color: darkgray;}
            .dimgray            {color: dimgray;}
            .lightgray          {color: #cccccc;}
            .verylightgray      {color: gainsboro;}
            .black              {color: var(--primary-text-color);}
            .primarycolor       {color: var(--primary-color);}
            .silver             {color: silver;}
            .white              {color: white;}
            .yellow             {color: yellow;}
            .darkred            {color: darkred;}
            .firebrick          {color: firebrick;}
            .green              {color: green;}
            .red                {color: var(--label-badge-red);}
            .redChg             {color: var(--label-badge-red);}
            .redbox             {border: 1px solid var(--label-badge-red);
                                border-collapse: collapse;}

            .mobappRecd         {color: teal;}
            /* .errorMsg           {color: var(--label-badge-red);
                                    border-left: 2px solid var(--label-badge-red);}*/
            .errorMsg           {color: MediumVioletRed;
                                border-left: 2px solid MediumVioletRed;
                                background-color: lightyellow;
                                font-weight: 500}
            .errorAlertMsg      {color: white;
                                background-color: green;
                                border: 1px solid limegreen);
                                font-weight: 500}
                                }
            .warningMsg         {color: darkorange;
                                border-left: 2px solid darkorange;}

            /* Color for special records */
            /* DarkGoldenRod, Fushia, DeepPink, OrangeRed, #e600e6 (firebrickish), MediumVioletRed */
            .specColor1         {color: LightSeaGreen;  border-left: 2px solid firebrick;}
            .specColor2         {color: BlueViolet; border-left: 2px solid BlueViolet;}
            .specColor3         {color: OrangeRed;  border-left: 2px solid OrangeRed;}
            .specColor4         {color: DeepPink;   border-left: 2px solid SeaGreen;}
            .specColor5         {color: MediumVioletRed; border-left: 2px solid RoyalBlue;}
            .specColor6         {color: Var(--dark-primary-color); border-left: 2px solid var(--dark-primary-color);}


            .trigger            {color: var(--primary-text-color); font-weight: 300;}
            .normalText         {color: var(--primary-text-color);}
            .event              {colspan: 5;}

            /* Solid bars for update start/complete, startup stage recds, startup date recd */
            .hdrTopBottomShadow, btnSelected {
                                -moz-box-shadow: inset rgba(0, 0, 0, 0.8) 0px 14px 18px -18px, inset #000000 0px -14px 18px -18px;
                                -webkit-box-shadow: inset rgba(0, 0, 0, 0.8) 0px 14px 18px -18px, inset #000000 0px -14px 18px -18px;
                                box-shadow:  inset rgba(0, 0, 0, 0.8) 0px 14px 18px -18px, inset #000000 0px -14px 18px -18px;
                                }
            .updateRecdHdr      {color: white;
                                background-color: rgba(var(--rgb-primary-color), 0.85);
                                border-top: 1px solid rgba(108, 204, 249, .5);
                                border-bottom: 1px solid rgba(108, 204, 249, .5);
                                font-weight: 500;
                                }
            .updateRecdHdrTime  {color: black;
                                background-color: rgba(var(--rgb-primary-color), 0.85);
                                border-top: 1px solid rgba(108, 204, 249, .5);
                                border-bottom: 1px solid rgba(108, 204, 249, .5);
                                }
            .updateEdgeBar      {border-left: 2px solid var(--dark-primary-color);}
            .highlightBar       {color: white;
                                background-color: green;
                                font-weight: 500;
                                border-top: 1px solid darkseagreen;
                                border-bottom: 1px solid darkseagreen;
                                }
            .highlightEdgeBar   {border-left: 2px solid darkseagreen;}

            .iC3StartingHdr     {color: white;
                                background-color: chocolate;
                                font-weight: 500;
                                border-top: 1px solid chocolate;
                                border-bottom: 1px solid chocolate;
                                }
            .iC3StartingHdrTime {color: black;
                                background-color: chocolate;
                                border-top: 1px solid chocolate;
                                border-bottom: 1px solid chocolate;
                                }
            .stageRecdHdr       {color: white;
                                background-color: peru;
                                font-weight: 500;
                                border-top: 1px solid peru;
                                border-bottom: 1px solid peru;
                                }
            .stageRecdHdrTime   {color: black;
                                background-color: peru;
                                border-top: 1px solid peru;
                                border-bottom: 1px solid peru;
                                }
            .stageEdgeBar       {border-left: 2px solid peru;}
            .dateBarHdr         {color: white;
                                background-color: peru;
                                border-top: 1px solid peru;
                                border-bottom: 1px solid peru;
                                }
            .noLeftEdge         {border-left: none;}

            /* Card Definition */
            ha-card {
                background-color: var(--card-background-color);
                padding: 10px;
            }
            #background {
                position: relative;
                height: 682px;
                /*width: 473px;*/
            }

            /* Title Bar set up */
            #titleBar {
                position: relative;
                display: inline-block;
                height: 20px;
                margin: 1px 0px -6px 0px;
                width: 100%;
                // border: 1px solid dodgerblue;
            }
            #title {
                height: 100%;
                width: 55%;
                text-align: left;
                font-size: 22px;
                margin: 0px 0px 0px 0px;
                float: left;
                vertical-align: middle;
                color: var(--primary-text-color);
                //border: 1px solid var(--label-badge-red);
            }

            #utilityBar {
                position: relative;
                display: inline-block;
                margin: 2px 0px -10px 0px;
                width: 100%;
                /*border: 1px solid dodgerblue;*/
            }
            /* Hidden variable fields */
            #thisButtonId, #logRecdCnt, #devType, #hdrCellWidth, #aboutVersion,
            #versionSentFlag, #displayUserMsgFlag {
                /*font-size: 2px;*/
                visiblity: hidden;
                color: transparent;
                /*color: red;*/
                width: 5px;
                float: left;
                /*border: 1px solid green;*/
            }
            #infoText {
                /*color: var(--primary-color);*/
                font-size: 14px;
                float: right;
            }

            /* Store the theme's primary text color in the thisButtonId field */
            /* .themeTextColor {
                color: var(--primary-text-color);
                background-color: var(--secondary-text-color);
                visiblity: hidden;
            } */

            /* Message Bar setup - Name & Time below Name & Acion Buttons */
            #statusBar {
                position: relative;
                /*width: 100%;*/
                /*border: 1px solid dodgerblue;*/
            }
            #statusName {
                width: 55%;
                color: firebrick;
                float: left;
                font-size: 14px;
                font-weight: 400;
                margin: 2px 0px 4px 0px;
                /*border: 1px solid var(--label-badge-red);*/
                z-index: 9999;
            }
            #statusTime {
                color: firebrick;
                float: right;
                font-size: 14px;
                font-weight: 400;
                margin: 2px 0px 4px 0px;
                /*border: 1px solid green;*/
            }
            .statusMsgPopup {
                position: relative;
                width: 85%;
                margin-left: auto;
                margin-right: auto;
                color: white;
                background-color: var(--label-badge-red);
                padding: 12px 12px;
                font-size: 14px;
                font-weight: 400;
                z-index: 9999;
                -webkit-box-shadow: 5px 5px 23px 3px rgba(0,0,0,0.75);
                -moz-box-shadow: 5px 5px 23px 3px rgba(0,0,0,0.75);
                box-shadow: 3px 3px 20px 3px rgba(0,0,0,0.75);
            }
            .statusMsgPopupHidden {
                height: 0px;
                width: 0px;
                visibility: hidden;
                border: 0px;
            }

            /* Scrollbar */
            ::-webkit-scrollbar {width: 7px;}
            ::-webkit-scrollbar-track {background-color: transparent;
                border-left: 1px solid rgba(var(--rgb-primary-color), 0.2);}
            ::-webkit-scrollbar-thumb {background: rgba(var(--rgb-accent-color), 0.7);
                border-radius: 4px;}
            ::-webkit-scrollbar-thumb:hover {background: var(--accent-color);}

            /* Event Log Table */
            .txtTblStyle        {color: var(--dark-primary-color);}
            .txtTblHdr          {border-left: 1px solid var(--dark-primary-color);}
            .txtTblHdrRow       {color: var(--dark-primary-color);}
            .txtTblEdge         {border-left: 1px solid var(--dark-primary-color);}

            .highlightResults   {color: red;}
            .inprocessResults   {color: firebrick;}
            .highlightItem      {color: silver;}
            .highlightItemChg   {color: silver;}

            #tblEvlog {
                position: relative;
                margin: 0px 0px;
                width: 100%;
            }

            /* Event Log Table */
            .tblEvlog {
                position: sticky;
                display: block;
                table-layout: fixed;
                width: 100%;
                border-collapse: collapse;
            }
            .tblEvlogHdr {
                position: sticky;
                table-layout: fixed;
                display: block;
                width: 100%;
                height: 16px;
                padding: 0px 0px 3px 0px;
                border-collapse: collapse;
                background-color: rgba(var(--rgb-primary-color), 0.15);
                border: 1px solid rgba(var(--rgb-primary-color), 0.3);
            }
            .tblEvlogHdr tr {
                display: block;
            }
            .tblEvlogBody {
                display: block;
                table-layout: fixed;
                width: 100%;
                height: 568px;
                border-collapse: collapse;
                border: 1px solid rgba(var(--rgb-primary-color), 0.2);
                border-top: 1px solid transparent;
                overflow-y: scroll;
                overflow-x: hidden;
                -webkit-overflow-scrolling: touch;
            }
            .tblEvlogBody tr {
                border: 1px solid rgba(var(--rgb-primary-text-color), 0.1);
                line-height: 1.4em;
                z-index: 1;
            }

            .noTopBorder {border: 1px solid transparent;}
            .rowBorder {border-left: 2px solid cyan;}
            .tblEvlogBody tr:nth-child(even) {background-color: rgba(var(--rgb-primary-text-color), 0.05);}
            .tblEvlogBody tr:nth-child(odd) {background-color: var(--primary-background-color);}

            /* Browser Text */
            .colTime        {width: 66.67px; vertical-align: text-top;}
            .colStat        {width: 92.22px; vertical-align: text-top;}
            .colZone        {width: 90.00px; vertical-align: text-top;}
            .colIntv        {width: 76.67px; vertical-align: text-top;}
            .colTrav        {width: 65.56px; vertical-align: text-top;}
            .colDist        {width: 62.22px; vertical-align: text-top;}
            .colTimeTextRow {color: rgba(var(--rgb-primary-text-color), 0.5); vertical-align: text-top;}
            .colText        {color: var(--primary-text-color)}

            /* Browser Header */
            .hTime        {width: 64.6px; text-align: left; color: var(--primary-text-color); padding-left: 4px;}
            .hStat        {width: 90.2px; text-align: left; color: var(--primary-text-color);}
            .hZone        {width: 88.0px; text-align: left; color: var(--primary-text-color);}
            .hIntv        {width: 73.6px; text-align: left; color: var(--primary-text-color);}
            .hTrav        {width: 63.6px; text-align: left; color: var(--primary-text-color);}
            .hDist        {width: 59.1px; text-align: left; color: var(--primary-text-color);}
            .hdrBase      {text-align: left; color: var(--primary-text-color);}

            /* Base Select Button */
            #btnHelp, #btnRefresh, #btnHeart, #btnConfig, #btnIssues, #btnBuyMeACoffee  {
                display: inline-block;
                color: var(--primary-text-color);
                background-color: transparent;
                /* margin: 0px 0px 0px 8px; */
                float: right;
                /* border: 1px solid blue;*/
            }
            .btnHelp .btnRefresh, .btnHeart, .btnConfig, .btnIssues, .btnBuyMeACoffee {}
                border: 0px solid transparent;
                background-color: transparent;
                box-shadow: transparent;
            }
            /*                       Top Rt  Bot Left*/
            #btnRefresh      {margin: 0px 8px 0px 05px;}
            #btnBuyMeACoffee {margin: 0px 2px 0px 3px;}
            #btnIssues       {margin: 0px 1px 0px 1px;}
            #btnConfig       {margin: 0px 2px 0px 1px;}
            #btnHelp         {margin: 0px 0px 0px 1px;}
            /* #btnHeart       {margin: 0px 0px 0px 1px;}  */

            svg         {stroke: #ff4d4d;}
            svg:hover   {stroke: var(--primary-color);}

            /* Name & Action Buttons */
            .buttonBar {
                position: relative;
                margin: 8px 0px 8px 0px;
                width: 100%;
                border: 1px solid blue;
            }
            .btnBaseFormat {
                display: inline-block;
                /*visibility: visible;*/
                font-family: Roboto,sans-serif;
                font-size: 14px;
                font-weight: 500;
                color: var(--primary-text-color);
                /*background-color: transparent;*/
                background-color: rgba(var(--rgb-primary-text-color), 0.05);
                text-decoration: none;
                text-align: center;
                height: 24px;
                padding: 1px 4px;
                margin: 4px 6px 0px 0px;
                border: 1px solid #ff4d4d;
                border-radius: 3px;
                box-sizing: border-box;
                /*border: 1px solid #0080F0;*/
            }
            .btnSelected {
                color: white;
                background-color: darkred;
            }
            .btnNotSelected {
                color: var(--primary-text-color);
                background-color: rgba(var(--rgb-primary-text-color), 0.07);
                /*color: darkred;*/
                /*background-color: #ffffe6;*/

            }
            .btnUserMessage {
                color: white;
                border: 1px solid limegreen;
                background-color: green;
            }
            .btnUserMessageDesc {
                color: green;
            }
            .btnHidden {
                display: none;
            }
            .btnHoverName {border: 1px solid var(--primary-color);}

            /* Action Select Button */
            #btnAction {
                color: white;
                background-color: darkred;
                float: right;
                margin: 4px 0px 0 0;
                border: 1px solid #ff4d4d;
            }
            /*margin: 4px 2px 0 0;*/
            #btnAction:hover {border: 1px solid var(--primary-color);}
            .btnAction {
                background: darkred;
                font-weight: 500;
                height: 24px;
                width: 80px;
                border-radius: 3px;
                overflow: hidden;
                -webkit-appearance: none;
                -moz-appearance: none;
                transition: color 0.3s ease, background-color 0.3s ease, border-bottom-color 0.3s ease;

                /* Action Button Down Arrow */
                background-image:
                    linear-gradient(#cc0000, #cc0000),
                    linear-gradient(darkred 43%, transparent 35%),
                    linear-gradient(-135deg, transparent 58%, darkred 50%),
                    linear-gradient(-225deg, white 58%, darkred 50%);
                background-size: 1px 100%, 22px 26px, 22px 26px, 22px 100%;
                background-repeat: no-repeat;
                background-position: right 20px center, right bottom, right bottom, right bottom;

            }
            .btnAction::-ms-expand {
                display: none;
            }
            .btnActionOptionGroup {
                background-color: var(--primary-background-color);
                color: var(--primary-text-color);
                text-align: left;
            }
            .btnActionOptionTransparent {
                background-color: var(--primary-background-color);
                color: var(--primary-text-color);
                text-align: left;
            }
            .btnActionOption {
                background-color: var(--primary-background-color);
                color: var(--primary-text-color);
                text-align: left;
            }

            /*  IPHONE IPAD Mods */
            /* iPhone with smaller screen*/
            @media only screen and (max-device-width: 640px),
                    only screen and (max-device-width: 667px),
                    only screen and (max-width: 480px) {

                ha-card         {padding: 4px 4px 4px 4px;}
                .title          {font-size: 18px;}
                .btnBaseFormat  {margin: 0px 2px 4px 0px; padding: 1px 3px;)
                .btnAction      {width: 45px; height: 22px;}
                .updateRecd     {font-weight: 500;}

                .ic3StartupMsg  {font-weight: 500;}
                .tblEvlogBody tr:nth-child(even) {background-color: #EEF2F5;}
                ::-webkit-scrollbar {width: 1px;}
                ::-webkit-scrollbar-thumb {background: rgba(var(--rgb-accent-color), 0.7);}
            }

            /* iPad ???
            @media only screen
                and (min-device-width : 768px)
                and (max-device-width : 1024px) {
                    .updateRecd  {font-weight: 500;}
                    .updateEdgeBar {border-left-width: 2px;}
                    .ic3StartupMsg {font-weight: 500;}
                    .tblEvlogBody tr:nth-child(even) {background-color: #EEF2F5;}
                    ::-webkit-scrollbar {width: 1px;}
                    ::-webkit-scrollbar-thumb {background: rgba(var(--rgb-accent-color), 0.7);}
                }
                */

        `

        // Build title
        titleBar.appendChild(title)
        titleBar.appendChild(btnHelp)
        titleBar.appendChild(btnConfig)
        titleBar.appendChild(btnIssues)
        titleBar.appendChild(btnBuyMeACoffee)
        titleBar.appendChild(btnRefresh)
        // titleBar.appendChild(btnHeart)

        utilityBar.appendChild(thisButtonId)
        utilityBar.appendChild(logRecdCnt)
        utilityBar.appendChild(devType)
        utilityBar.appendChild(hdrCellWidth)
        utilityBar.appendChild(aboutVersion)
        utilityBar.appendChild(versionSentFlag)
        utilityBar.appendChild(infoText)
        utilityBar.appendChild(displayUserMsgFlag)

        // Create Buttons
        buttonBar.appendChild(btnAction)
        buttonBar.appendChild(btnName0)
        buttonBar.appendChild(btnName1)
        buttonBar.appendChild(btnName2)
        buttonBar.appendChild(btnName3)
        buttonBar.appendChild(btnName4)
        buttonBar.appendChild(btnName5)
        buttonBar.appendChild(btnName6)
        buttonBar.appendChild(btnName7)
        buttonBar.appendChild(btnName8)
        buttonBar.appendChild(btnName9)

        // Build Message Bar
        statusBar.appendChild(statusName)
        statusBar.appendChild(statusTime)
        statusBar.appendChild(statusMsgPopup)

        tblEvlog.appendChild(tblEvlogHdr)
        tblEvlog.appendChild(tblEvlogBody)
        tblEvlogContainer.appendChild(tblEvlog)

        // Create Background
        background.appendChild(titleBar)
        background.appendChild(utilityBar)
        background.appendChild(buttonBar)
        background.appendChild(statusBar)
        background.appendChild(tblEvlogContainer)
        background.appendChild(cssStyle)

        card.appendChild(background)
        root.appendChild(card)

        // Click & Mouse Events
        for (let i = 0; i <= 9; i++) {
            let buttonId = 'btnName' + i
            let button = root.getElementById(buttonId)

            button.addEventListener("mousedown", event => { this._nameButtonPress(buttonId); })
            button.addEventListener("mouseover", event => { this._btnClassMouseOverName(buttonId); })
            button.addEventListener("mouseout", event => { this._btnClassMouseOut(buttonId); })
        }

        btnAction.addEventListener("change", event => { this._btnActionHandler(); })
        btnRefresh.addEventListener("mousedown", event => { this._btnRefreshHandler(); })
        btnConfig.addEventListener("mousedown", event => { this._btnConfigHandler(); })

        btnRefresh.addEventListener("mouseover", event => { this._btnClassMouseOver("btnRefresh"); })
        btnRefresh.addEventListener("mouseout", event => { this._btnClassMouseOut("btnRefresh"); })
        btnBuyMeACoffee.addEventListener("mouseover", event => { this._btnClassMouseOver("btnBuyMeACoffee"); })
        btnBuyMeACoffee.addEventListener("mouseout", event => { this._btnClassMouseOut("btnBuyMeACoffee"); })
        btnIssues.addEventListener("mouseover", event => { this._btnClassMouseOver("btnIssues"); })
        btnIssues.addEventListener("mouseout", event => { this._btnClassMouseOut("btnIssues"); })
        btnConfig.addEventListener("mouseover", event => { this._btnClassMouseOver("btnConfig"); })
        btnConfig.addEventListener("mouseout", event => { this._btnClassMouseOut("btnConfig"); })
        btnHelp.addEventListener("mouseover", event => { this._btnClassMouseOver("btnHelp"); })
        btnHelp.addEventListener("mouseout", event => { this._btnClassMouseOut("btnHelp"); })
        btnAction.addEventListener("mouseover", event => { this._btnClassMouseOver("btnAction"); })
        btnAction.addEventListener("mouseout", event => { this._btnClassMouseOut("btnAction"); })

        // Add to root
        this._config = config
    }

    // Create card.
    //---------------------------------------------------------------------------
    set hass(hass) {
        /* Hass will do this on a regular basis. If this is the first time
        through, set up the button names. otherwise, display the event table.
        */
        this._hass           = hass
        const root           = this.shadowRoot
        const thisButtonId   = root.getElementById("thisButtonId")
        const statusTime     = root.getElementById("statusTime")
        const statusMsgPopup = root.getElementById("statusMsgPopup")
        const tblEvlog       = root.getElementById("tblEvlog")
        const devType        = root.getElementById("devType")
        const optiC3Version  = root.getElementById("optiC3Version")
        const optEvLogLatest = root.getElementById("optEvLogLatest")
        const displayUserMsgFlag = root.getElementById("displayUserMsgFlag")
        const versionSentFlag = root.getElementById("versionSentFlag")

        try {
            const EvLogLatestVersion  = hass.states['sensor.icloud3_event_log'].attributes['version_evlog']
            const iC3Version   = hass.states['sensor.icloud3_event_log'].attributes['version_ic3']
            const updateTime   = hass.states['sensor.icloud3_event_log'].attributes['update_time']
            const userMessage  = hass.states['sensor.icloud3_event_log'].attributes['user_message']
            const aboutVersion = root.getElementById("aboutVersion")
            const btnName0     = root.getElementById("btnName0")

            optiC3Version.text  = " • iCloud3 v" + iC3Version + " (Installed & Running)"
            optEvLogLatest.text = " • EvLog... v" + EvLogLatestVersion + " (Latest-iC3/EvLog dir)"

            if (thisButtonId.innerText == "setup") {
                displayUserMsgFlag.innerText = 'true'
                this._classListRemove('btnName0', 'btnUserMessage')
                this._setupDevType()
                this._setupButtonNames()
                this._btnSetUrlsHandler()
                this._highlightSelectedNameButton(this._currentButtonId())
                // this._issue_evlog_version_svc_call()

            } else if (displayUserMsgFlag.innerText == 'false') {
                'pass'

            } else if (btnName0.innerText != userMessage && userMessage != '') {
                displayUserMsgFlag.innerText = 'true'
                this._setupButtonNames()
                this._btnSetUrlsHandler()
                this._displayDevicenameMsgL('')
                // this._issue_evlog_version_svc_call()
            }

            if (statusMsgPopup.innerHTML == 'cancelMsgDisplay') {
                'pass'
            } else if (EvLogLatestVersion != '' && EvLogLatestVersion > aboutVersion.innerText) {
                if (devType.innerText.startsWith("phn") || devType.innerText.startsWith("pad")) {
                    statusMsgPopup.innerHTML = '<p>The `Event Log Program` has been updated. You need to refresh \
                    the Mobile App to load the new version.\
                    <br>...You are running: v'+ aboutVersion.innerText +
                    '<br>...Updated Version: v'+ EvLogLatestVersion +
                    '<br><br>\
                    Refreshing the Mobile App:<br>\
                    1. Open the Mobile App on the iPhone or iPad.<br>\
                    2. Select `Settings > Companion App`.<br>\
                    3. Select `Debugging`, then select `Reset frontend cache`.<br>\
                    4. Select `Settings` at the top, then select `Done` to go back to the Settings screen.<br>\
                    5. Pull the page down to refresh the screens. The spinning wheel is displayed for a few seconds.<br>\
                    <hr>\
                    Select `Refresh` (above `Actions`) to hide this Update Message.\
                    </p>'
                } else {
                    statusMsgPopup.innerHTML = '<p>The `Event Log Program` has been updated. You need to refresh \
                    your browser to load the new version.\
                    <br>...You are running: v'+ aboutVersion.innerText +
                    '<br>...Updated Version: v'+ EvLogLatestVersion +
                    '<br><br>\
                    Refreshing Chrome, Safari, Edge:<br>\
                    1. Display the Event Log, then press Ctrl+Shift+De.l<br>\
                    2. Check `Clear images and files`, then Select `Clear Data`.<br>\
                    3. Select the tab displaying the iCloud3 information and Event Log and Refresh the display several times.<br><br>\
                    <hr>\
                    Select `Refresh` (above `Actions`) to hide this Update Message.\
                    </p>'
                }

            }

            if (statusMsgPopup.innerHTML == '' || statusMsgPopup.innerHTML == 'cancelMsgDisplay') {
                if (statusMsgPopup.classList.contains('statusMsgPopupHidden') == false) {
                    this._classListAdd('statusMsgPopup', 'statusMsgPopupHidden')
                    this._classListRemove('statusMsgPopup', 'statusMsgPopup')
                }
            } else if (statusMsgPopup.classList.contains('statusMsgPopupHidden')) {
                this._classListAdd('statusMsgPopup', 'statusMsgPopup')
                this._classListRemove('statusMsgPopup', 'statusMsgPopupHidden')
            }

            if (statusTime.innerText.indexOf(updateTime) == -1) {
                this._setupEventLogTable('hass')
            }
            if (versionSentFlag.innerText == -1) {
                versionSentFlag.innerText = 0
            }
        }

        catch (err) {
            const statusMsgPopup = root.getElementById("statusMsgPopup")
            const statusTime     = root.getElementById("statusTime")

            if (statusMsgPopup.classList.contains('statusMsgPopupHidden') == false) {
                return
            }
            tblEvlog.style.setProperty('visibility', 'hidden')
            const msgStarting = '<p>iCloud3 is Starting<br><hr><br>Please wait</p>'
            const msgNotRunning = '<p>iCloud3 Start up Warning/Error:<br><hr><br>\
            iCloud3 is starting but there may be a problem. iCloud3 is now a HA Integration and probably has not been added \
            to Home Assistant on the Devices & Services screen. Other reasons may be \
            it is restarting, not running, not installed, has not been set up or there are other errors.<br><br><hl>\
            BE SURE YOU HAVE SET UP THE ICLOUD3 INTEGRATION:<br>\
            1. HA Configuration > Devices & Services > Integrations,<br>\
            2. Select `+Add Integration`<br>\
            3. Type `iCloud3` in the Search integrations field and select iCloud3 Device Tracker<br>\
            4. Restart Home Assistant. iCloud3 will start up and your configuration parameters will be migrated to the new format<br>\
            5. Select HA Configuration > Devices & Services > Integrations > iCloud3 > Configure and review the parameters on each of \
            the screens. Verify that the parameters were migrated correctly. Make any changes that are needed.<br>\
            7. Remove the iCloud3 configuration parameters from the `/config/configuration.yaml` file<br><br><hl>\
            CHECK FOR ICLOUD3 LOAD ERRORS IN THE HA LOG FILE:<br>\
            • HA Configuration > System > Logs > Load Full Logs, or<br>\
            • View `/config/home-assistant.log` file in a text editor<br><br>\
            You can also review the iCloud3 documentation by selecting the Question Mark (?) in the upper right corner of the Event Log. \
            Then go to the Trouble Shooting section.<br><br>\
            Error: '+ err.name + ', ' + err.message + '</p>'

            if (err.name == 'TypeError') {
                if (err.message.indexOf('attributes') > -1) {
                    if (thisButtonId.innerText == "setup") {
                        statusMsgPopup.innerHTML = msgNotRunning
                    } else {
                        statusMsgPopup.innerHTML = msgStarting
                    }
                    this._classListRemove('statusMsgPopup', 'statusMsgPopupHidden')
                } else if (err.message.indexOf('undefined') == -1) {
                    alert(err)
                }
            } else {
                alert(err)
            }

        }
    }

    //---------------------------------------------------------------------------
    _setupButtonNames() {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the names on the buttons and make them visible.
        */
        const hass         = this._hass
        const root         = this.shadowRoot
        const fname        = hass.states['sensor.icloud3_event_log'].attributes['fname']
        const fnamesList   = hass.states['sensor.icloud3_event_log'].attributes['fnames']
        const fnames       = Object.values(fnamesList)
        const fnamesKeys   = Object.keys(fnamesList)
        var   fnamesCnt    = fnames.length

        const thisButtonId = root.getElementById("thisButtonId")
        const displayUserMsgFlag = root.getElementById("displayUserMsgFlag")
        var   userMessage  = hass.states['sensor.icloud3_event_log'].attributes['user_message']
        // alert('fnames='+fnames)
        // alert('fnamesKeys='+fnamesKeys)
        // alert('gc='+fnamesList["gary_iphone"])
        // See if the user message display was overridden by pressing the displayed message
        // or Refresh. Seleting an Action. resets it to display again.
        if (displayUserMsgFlag.innerText == 'false') {
            userMessage = ''
        }

        for (var i = 0; i < 10; i++) {
            let buttonId = 'btnName' + i
            var button = root.getElementById(buttonId)

            //Get button for data in current sensor.icloud3_event_log
            if (fname == fnames[i]) {
                thisButtonId.innerText = buttonId
            }

            // if (i < names.length) {
            if (i < fnamesCnt) {
                // Display the device names buttons
                if (userMessage == '') {
                    button.innerText = fnames[i]
                    this._classListRemove(buttonId,  'btnHidden')
                    this._classListRemove(buttonId,  'btnUserMessage')

                    if (buttonId == thisButtonId.innerText) {
                        this._highlightSelectedNameButton(buttonId)
                    } else {
                        this._classListAdd(buttonId, 'btnNotSelected')
                    }

                // A user_message need to be displayed in the first Name button
                } else {
                    if (i == 0) {
                        button.innerText = userMessage
                        this._classListAdd(buttonId, 'btnUserMessage')
                    } else {
                        button.innerText = ''
                        this._classListAdd(buttonId, 'btnHidden')
                    }
                }
            } else {
                button.innerText = ''
                this._classListAdd(buttonId, 'btnHidden')
            }
        }
    }

    //---------------------------------------------------------------------------
    _setupEventLogTable(devicenameParm) {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the event log table
        */

        const hass         = this._hass
        const root         = this.shadowRoot
        const tblEvlog     = root.getElementById("tblEvlog")
        const hdrCellWidth = root.getElementById("hdrCellWidth")
        const logRecdCnt   = root.getElementById("logRecdCnt")
        const devType      = root.getElementById("devType")
        const btnAction    = root.getElementById('btnAction')
        const title        = root.getElementById('title')
        const versionSentFlag = root.getElementById('versionSentFlag')

        var logs = hass.states['sensor.icloud3_event_log'].attributes['logs']
        var startedTime = hass.states['sensor.icloud3_event_log'].attributes['started_time']

        /*
        The Evlog table has been built and displayed but Hass usually calls this routine a
        second time. No need to builds tblEvlog again but now go back thru and
        update the header cell lengths
        */

        if (this._isUserMessageDisplayed()) {
            this._setupButtonNames()
        }

        if (logs.length == logRecdCnt.innerText) {
            if (hdrCellWidth.innerText.startsWith('0,')) {
                this._resize_header_width()
                this._set_evlog_body_height()
            }
            return
        }

        this._checkNameButtonSelected()

        if (logs.length > 0) {
            var logEntriesRaw = logs.slice(2, -2)
            var logEntries = logEntriesRaw.split('], [', 99999)
        }

        logRecdCnt.innerText = logs.length
        let row = 0
        var sameTextCnt = 0
        var infoTimeText = ""

        var iPhoneP = false
        var iPhoneL = false
        var iPad    = false
        var iPadP   = false
        var iPadL   = false

        if (devType.innerText == "phnP") { iPhoneP = true }
        else if (devType.innerText == "phnL") { iPhoneL = true }
        else if (devType.innerText == "padP") { iPadP = true }
        else if (devType.innerText == "padL") { iPadL = true }
        if (devType.innerText.startsWith("pad") > 0) { iPad = true }

        /* Field naming conventions (xTime examples appply to all cell fields):
            thTime = Header text for Time column
            hTime  = hTime header Id & Class name
            iTime  = iTime data cell Id name
            classTime = iTime class name
            tTime  = Time text for current record
            nTime  = Time text for next record
        */

        var cellWidth = hdrCellWidth.innerText.split(',')
        var thTime = "Time"
        var thStat = "MobileApp"
        var thZone = "iC3 Zone"
        var thIntv = "Interval"
        var thTrav = "Travel"
        var thDist = "Distance"
        if (iPhoneP) {
            thIntv = "Intvl"
            thTrav = "Travl"
            thDist = "Dist"
            btnAction.style.setProperty('width', '80px')
            btnAction.style.setProperty('height', '22px')
            btnAction.style.setProperty('margin', '2px 2px 0 0')
            title.style.setProperty('font-size', '20px')
        }
        let logTableHeadHTML = ''
        logTableHeadHTML += '<thead id="tblEvlogHdr">'
        logTableHeadHTML += '<tr class="tblEvlogHdr">'
        logTableHeadHTML += '<th id="hTime" class="hTime" style="width: ' + cellWidth[1] + ';">' + thTime + '</th>'
        logTableHeadHTML += '<th id="hStat" class="hStat" style="width: ' + cellWidth[2] + ';">' + thStat + '</th>'
        logTableHeadHTML += '<th id="hZone" class="hZone" style="width: ' + cellWidth[3] + ';">' + thZone + '</th>'
        logTableHeadHTML += '<th id="hIntv" class="hIntv" style="width: ' + cellWidth[4] + ';">' + thIntv + '</th>'
        logTableHeadHTML += '<th id="hTrav" class="hTrav" style="width: ' + cellWidth[5] + ';">' + thTrav + '</th>'
        logTableHeadHTML += '<th id="hDist" class="hDist" style="width: ' + cellWidth[6] + ';">' + thDist + '</th>'

        logTableHeadHTML += '<th id="hdrScroll"> </th>'
        logTableHeadHTML += '</tr>'
        logTableHeadHTML += '</thead>'

        let logTableHTML = ''
        logTableHTML += '<div class="tblEvlog">'
        logTableHTML += '<table id ="tblEvlog" >'
        logTableHTML += logTableHeadHTML
        logTableHTML += '<tbody id="tblEvlogBody" class="tblEvlogBody">'

        /*
        Data extraction steps:
        1. Drop '[[' and ']]' at each end.
        2. Split on '], ][' to create a list item for each record.
        3. Cycle through list records. Split on ', ' to create each element.
        */
        if (logs.length == 0) {
            return
        }

        var completedItemHighlightNextRowFlag = false
        var classEdgeBar = ''
        var cancelEdgeBarFlag = false
        var dropRecdFlag = false
        var initializationRecdFound = false
        var mobappUpdateCompleteFlag = false
        var icloudUpdateCompleteFlag = false

        for (var i = 0; i < logEntries.length - 1; i++) {
            try {
                var thisRecd = logEntries[i].split("', '", 10)
                var nextRecd = logEntries[i + 1].split("', '", 10)
                var nText = nextRecd[1].slice(0, -1)

                var recdType = 'text'
                var tTime = thisRecd[0].slice(1)
                var tText = thisRecd[1].slice(0, -1)

                // ^t^ = zone, interval, travel time, distance item
                if (tText.startsWith("^t^")) {
                    tText = tText.slice(3)
                    var recdType = 'zoneDistTime'
                    var zoneDistTime = tText.split(",", 10)
                    var tStat = zoneDistTime[0]
                    var tZone = zoneDistTime[1]
                    var tIntv = zoneDistTime[2]
                    var tTrav = zoneDistTime[3]
                    var tDist = zoneDistTime[4]

                    var maxStatZoneLength = 10
                    if (iPhoneP) {
                        tText = tText.replace('/icloud3', '... .../icloud3')
                        maxStatZoneLength = 10
                        if (tStat == 'stationary') { tStat = 'stationry' }
                        if (tZone == 'stationary') { tZone = 'stationry' }
                        if (tStat == 'Stationary') { tStat = 'Stationry' }
                        if (tZone == 'Stationary') { tZone = 'Stationry' }

                        tIntv = tIntv.replace(' secs', 's')
                        tIntv = tIntv.replace(' sec', 's')
                        tIntv = tIntv.replace(' mins', 'm')
                        tIntv = tIntv.replace(' min', 'm')
                        tIntv = tIntv.replace(' hrs', 'h')
                        tIntv = tIntv.replace(' hr', 'h')

                        tTrav = tTrav.replace(' secs', 's')
                        tTrav = tTrav.replace(' sec', 's')
                        tTrav = tTrav.replace(' mins', 'm')
                        tTrav = tTrav.replace(' min', 'm')
                        tTrav = tTrav.replace(' hrs', 'h')
                        tTrav = tTrav.replace(' hr', 'h')

                        tDist = tDist.replace(' mi', 'mi')
                        tDist = tDist.replace(' km', 'km')

                        if (txtTblFlag) {
                            tText = tText.replace("App Updates", "App Updts")
                            tText = tText.replace("Rqsts", "")
                            tText = tText.replace("Trigger Chgs", "Trig Chg")
                            tText = tText.replace("Locate", "Loc")
                        }
                    }
                    if (tStat.length > maxStatZoneLength) {
                        tStat = tStat.substr(0, maxStatZoneLength) + "<br>" + tStat.substr(maxStatZoneLength, tStat.length)
                        if (tStat.length > maxStatZoneLength * 2) { tStat = tStat.substr(0, maxStatZoneLength * 2 + 3) + "..." }
                    }
                    if (tZone.length > maxStatZoneLength) {
                        tZone = tZone.substr(0, maxStatZoneLength) + "<br>" + tZone.substr(maxStatZoneLength, tZone.length)
                        if (tZone.length > maxStatZoneLength * 2) { tZone = tZone.substr(0, maxStatZoneLength * 2 + 3) + "..." }
                    }
                }

                if (tText == nText) {
                    ++sameTextCnt
                    if (sameTextCnt == 1) { var firstTime = tTime }
                    continue
                }
                if (sameTextCnt > 10) {
                    tTime = firstTime
                    tText += ' (+' + sameTextCnt + ' more times)'
                    sameTextCnt = 0
                }

                var classTime = 'colTime'
                var classStat = 'colStat'
                var classZone = 'colZone'
                var classIntv = 'colIntv'
                var classTrav = 'colTrav'
                var classDist = 'colDist'
                var classText = 'colText'

                classTime += ' highlightResults'
                classStat += ' highlightResults'
                classZone += ' highlightResults'
                classIntv += ' highlightResults'
                classTrav += ' highlightResults'
                classDist += ' highlightResults'

                //Set header recd background bar color and turn edge bar on/off
                //Set Startup start/complete & stage bar colors and edge bars
                var classRecdType  = ' normalText'
                var classHeaderBar = ''
                var classErrorMsg  = ''
                var classSpecialTextColor = ''

                //Set text color the text starts with a special color character
                if (tText.startsWith("^1^")) {
                    classSpecialTextColor = ' specColor1'
                } else if (tText.startsWith("^2^")) {
                    classSpecialTextColor = ' specColor2'
                } else if (tText.startsWith("^3^")) {
                    classSpecialTextColor = ' specColor3'
                } else if (tText.startsWith("^4^")) {
                    classSpecialTextColor = ' specColor4'
                } else if (tText.startsWith("^5^")) {
                    classSpecialTextColor = ' specColor5'
                } else if (tText.startsWith("^6^")) {
                    classSpecialTextColor = ' specColor6'
                } else if (tText.startsWith("__")) {
                    classSpecialTextColor = ' normalText'
                } else {
                    classSpecialTextColor = ''
                }

                // ^s^ - update started text, cancel edge block
                if (tText.startsWith("^s^")) {
                    classHeaderBar = ' updateRecdHdr'
                    cancelEdgeBarFlag = true

                // ^c^ - update completed text, start edge block
                } else if (tText.startsWith("^c^")) {
                    if (tText.indexOf("Mobile App") >= 0) {
                        mobappUpdateCompleteFlag = true
                    } else {
                        icloudUpdateCompleteFlag = true
                    }
                    // cancelEdgeBarFlag = (tText.length == 3)
                    completedItemHighlightNextRowFlag = true
                    classHeaderBar = ' updateRecdHdr'
                    classEdgeBar = ' updateEdgeBar'

                    // ^i^ = iCloud3 Initialization Started/Completed
                } else if (tText.startsWith("^i^")) {
                    cancelEdgeBarFlag = (tText.indexOf("started") >= 0)
                    classHeaderBar = ' iC3StartingHdr'
                    classEdgeBar = ' stageEdgeBar'

                // ^h^ - special green highlight bar
                } else if (tText.startsWith("^h^")) {
                    cancelEdgeBarFlag = true
                    classHeaderBar = ' highlightBar'
                    classEdgeBar   = ' highlightEdgeBar'
                    classTime      = ' highlightBar'

                // ^g^ = iCloud3 Stage # Header
                } else if (tText.startsWith("^g^")) {
                    cancelEdgeBarFlag = (tText.length == 3)
                    classHeaderBar = ' stageRecdHdr'
                    classEdgeBar = ' stageEdgeBar'

                } else if (tText.startsWith("^a^")) {
                    classErrorMsg = ' errorMsg'

                } else if (tText.startsWith("^e^")) {
                    classErrorMsg = ' errorMsg'

                } else if (tText.startsWith("^w^")) {
                    classErrorMsg = ' warningMsg'
                }

                if (classHeaderBar != "") {
                    classHeaderBar = " hdrTopBottomShadow" + classHeaderBar
                }

                if (tText.indexOf("Initializing iCloud3") >= 0
                        && tText.indexOf("Complete") == -1) {
                    initializationRecdFound = true
                }

                // Uncompress evlog recd special characters. This is also in event_log.py
                // and used for the event-log.log and the debug.log files
                tText = tText.replace(/⣇/g, "<br>")
                tText = tText.replace(/⠈/g, "&nbsp;")
                tText = tText.replace(/⠉/g, "&nbsp;&nbsp;")
                tText = tText.replace(/⠋/g, "&nbsp;&nbsp;&nbsp;")
                tText = tText.replace(/⠛/g, "&nbsp;&nbsp;&nbsp;&nbsp;")
                tText = tText.replace(/⠟/g, "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
                tText = tText.replace(/⠿/g, "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")

                //If displaying a table, the State & Interval can contain column titles
                var classTable = ''
                var txtTblFlag = false
                if (tText.indexOf("¤s") >= 0) {
                    txtTblFlag = true
                    classTable = ' txtTblStyle'
                }

                //Build the table HTML from the special characters in the recd
                // ¤s=<table><tr>                     Table start, Row start
                // ¤e=</tr></table>                   Row end, Table end
                // §=</tr><tr>                        Row end, next row start
                // «40=<td style='width: 40%'>        Col start, 40% width
                // ¦0=</td><td>                       Col end, next col start
                // ¦10=</td><td style='width: 10%'>   Col end, next col start-width 10%
                // ¦40=</td><td style='width: 40%'>
                tText = tText.replace(/¤s/g, '<table style="width: 100%">')
                tText = tText.replace(/¤e/g, '</table>')

                tText = tText.replace(/«HS/g, '<thead id="txtTblHdr"><tr class="txtTblHdrRow">')
                tText = tText.replace(/¦LH-/g, '<th class="txtTblHdr" colSpan="2">')
                tText = tText.replace(/¦RH-/g, '</th><th class="txtTblHdr" colSpan="2">')
                tText = tText.replace(/»HE/g, '</th></thead>')

                tText = tText.replace(/«LT-/g, '<tr><td class="txtTblEdge" style="width: 28%">&nbsp;')
                tText = tText.replace(/¦LC-/g, '</td><td style="width: 7%">')
                tText = tText.replace(/¦RT-/g, '</td><td class="txtTblEdge" style="width: 28%">&nbsp;')
                tText = tText.replace(/¦RC-/g, '</td><td style="width: 7%">')

                tText = tText.replace(/»/g, '</td></tr>')

                //Determine if the state/zone/dist/time line should be displayed
                var displayStateZoneLineFlag = false
                if (classTime.indexOf("highlightResults") >= 0) { displayStateZoneLineFlag = true }
                if (tStat == '' && tZone == '') { displayStateZoneLineFlag = false }
                if (tText.startsWith("^i^")) { displayStateZoneLineFlag = false }
                if (tText.startsWith("^")) { tText = tText.slice(3) }

                classTime += classEdgeBar

                // If the edge bar is not set and this is a header bar (started/completed) or a
                // state/zone/time/distance record, we are not in a complete-->start update group
                // and an update is being discarded and retried due poor location data. Do not
                // display this event.

                // //Display zone/interval/travel time/distance row
                if (recdType == 'zoneDistTime') {
                    if (tIntv == '') { tIntv = ' ' }
                    if (tTrav == '') { tTrav = ' ' }
                    if (tDist == '') { tDist = ' ' }

                    ++row
                    logTableHTML += '<tr class = "eltRow">'
                    logTableHTML += '<td id="iTime" class="' + classTime + '">' + tTime + '</td>'
                    logTableHTML += '<td id="iStat" class="' + classStat + '">' + tStat + '</td>'
                    logTableHTML += '<td id="iZone" class="' + classZone + '">' + tZone + '</td>'
                    logTableHTML += '<td id="iIntv" class="' + classIntv + '">' + tIntv + '</td>'
                    logTableHTML += '<td id="iTrav" class="' + classTrav + '">' + tTrav + '</td>'
                    logTableHTML += '<td id="iDist" class="' + classDist + '">' + tDist + '</td>'

                    logTableHTML += '</tr>'

                // Display Text Row
                } else {
                    //tText = classTime
                    classTime = classTime.replace("highlightResults", "")
                    classTime = classTime.replace("inprocessResults", "")
                    classTime += classRecdType + classHeaderBar
                    classTime += ' colTimeTextRow'

                    if (classHeaderBar.indexOf("highlightBar") > 0) {
                        classTime = classTime.replace("normalText", "")
                        classTime = classTime.replace("colTimeTextRow", "")
                    }

                    if (classTime.indexOf("Hdr") >= 0) {
                        classText += ' noLeftEdge'
                        classTime = classTime.replace("colTimeTextRow", "")
                        classTime = classTime.replace("updateRecdHdr", "updateRecdHdrTime")
                        classTime = classTime.replace("stageRecdHdr", "stageRecdHdrTime")
                        classTime = classTime.replace("iC3StartingHdr", "iC3StartingHdrTime")
                        // tTime = ''
                    }
                    var classTextColor = classHeaderBar + classSpecialTextColor + classTable + classErrorMsg
                    if (classTextColor != "") {
                        classText = classText.replace("colText", classTextColor)
                    }
                    // tText = classTime + ">>" + tText

                    ++row
                    logTableHTML += '<tr class = "eltRow">'
                    logTableHTML += '<td class="' + classTime + '">' + tTime + '</td>'
                    logTableHTML += '</td>'
                    logTableHTML += '<td class="' + classText + '"; colspan="5">' + tText + '</td>'
                    logTableHTML += '</tr>'
                }

                if (cancelEdgeBarFlag) {
                    classEdgeBar = ''
                    cancelEdgeBarFlag = false
                }
            }
            catch(err) {}
        }

        logTableHTML += ''
        logTableHTML += '</tbody></table></div>'
        tblEvlog.innerHTML = logTableHTML

        this._resize_header_width()
        this._set_evlog_body_height()

        const updateTime    = hass.states['sensor.icloud3_event_log'].attributes['update_time'].slice(0, -7)
        const logLevelDebug = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const optMonitor    = root.getElementById("optMonitor")
        const optDebug      = root.getElementById("optDebug")
        const optRawdata    = root.getElementById("optRawdata")
        const optStartuplog = root.getElementById("optStartuplog")
        const statusName    = root.getElementById("statusName")

        if (logLevelDebug.indexOf("monitor") >= 0) {
            optMonitor.text = "Hide Tracking Monitors"
        } else {
            optMonitor.text = "Show Tracking Monitors"
        }
        if (logLevelDebug.indexOf("debug") >= 0) {
            optDebug.text = "Stop Debug Logging"
            // infoTimeText = "Debug, " + updateTime
        } else {
            optDebug.text = "Start Debug Logging"
        }
        if (logLevelDebug.indexOf("rawdata") >= 0) {
            optRawdata.text = "Stop Rawdata Logging"
            // infoTimeText = "Debug, " + updateTime
        } else {
            optRawdata.text = "Start Rawdata Logging"
        }

        if (statusName.classList.contains('errorAlertMsg')) {
            'pass'

        } else {
            this._displayTimeMsgR(infoTimeText)
        }

        // if (versionSentFlag.innerText == 0) {
        //     this._issue_evlog_version_svc_call()
        // }
    }

    //---------------------------------------------------------------------------
    _resize_header_width() {
        const root = this.shadowRoot
        const tblEvlog = root.getElementById("tblEvlog")
        const devType = root.getElementById("devType")
        var rowCnt = tblEvlog.rows.length

        //Get, reset and save header cell widths
        var hdrCellWidthStr = ''
        rowCnt = tblEvlog.rows.length
        for (var row = 1; row < rowCnt - 1; row++) {
            var cellCnt = tblEvlog.rows[row].cells.length
            var cellWidth = tblEvlog.rows[row].cells[1].offsetWidth
            if (cellCnt > 2 && cellWidth != 0) {
                for (var i = 0; i < cellCnt; i++) {
                    var cellBCRObj = tblEvlog.rows[row].cells[i].getBoundingClientRect()
                    var cellWidthBCR = cellBCRObj.width + 2
                    if (i == 5 && devType.innerText == "") { cellWidthBCR -= 10 }
                    hdrCellWidthStr += cellWidthBCR + 'px,'
                    tblEvlog.rows[0].cells[i].style.width = cellWidthBCR + 'px'
                }
                // alert(hdrCellWidth.innerText = row + ',' + hdrCellWidthStr)
                // alert(hdrCellWidthStr)
                return
            }
        }

        return
    }
    //---------------------------------------------------------------------------
    _set_evlog_body_height() {
        // The height of the EvLog items table body is set at 568 which workd with one
        // row of devicename buttons. Reduce the height if there are multiple rows
        const root = this.shadowRoot
        var buttonBar = root.getElementById("buttonBar")
        var buttonBarDim = buttonBar.getBoundingClientRect()
        var buttonBarHeight = buttonBarDim.height

        var tblEvLogBody = root.getElementById("tblEvlogBody")
        var tblEvLogBodyDim = tblEvLogBody.getBoundingClientRect()
        var tblEvLogBodyHeight = tblEvLogBodyDim.height

        if (tblEvLogBodyHeight > 568.5) {
            var newHeight = (595 - buttonBarHeight) + 'px'
            tblEvLogBody.style.setProperty('height', newHeight)
        }
    }
    //---------------------------------------------------------------------------
    _setupDevType() {
        const root = this.shadowRoot
        const devType = root.getElementById("devType")

        //iPhone  (portrait)  width=375, ,height=768
        //        (landscape) width=724, ,height=375
        //iPad    (portrait)  width=834, ,height=1092
        //        (landscape) width=1112, height=814
        //Windows (portrait)  width=1424, height=921

        var deviceWidth  = window.innerWidth
        var deviceHeight = window.innerHeight

        const userAgentStr       = navigator.userAgent
        var   userAgentAlamofire = userAgentStr.indexOf("Alamofire")
        var   userAgentHA        = userAgentStr.indexOf("HomeAssistant")
        var   appleDevice        = userAgentAlamofire + userAgentHA
        if (appleDevice > 0) {
            if (deviceWidth < 400 && deviceHeight < 800) {
                devType.innerText = "phnP"
            } else if (deviceWidth < 800 && deviceHeight < 400) {
                devType.innerText = "phnL"
            } else if (deviceWidth < 850 && deviceHeight > 800) {
                devType.innerText = "padP"
            } else if (deviceWidth > 800 && deviceHeight < 850) {
                devType.innerText = "padL"
            }
        }
        //alert('/'+devType.innerText+'/')
    }

    //---------------------------------------------------------------------------
    _checkNameButtonSelected() {
        /* Simulate name button press using the name returned from HA when  building
        the tblEvlog table. If  the  selected name was changed on one device and
        and then the Event Log was displayed in another, the  Log revs are for the
        selected device but the name highlighter will be for the precious device selected.
        */
        const root            = this.shadowRoot
        const hass            = this._hass

        const runMode      = hass.states['sensor.icloud3_event_log'].attributes['run_mode']
        const fname        = hass.states['sensor.icloud3_event_log'].attributes['fname']
        const fnamesList   = hass.states['sensor.icloud3_event_log'].attributes['fnames']
        const fnames       = Object.values(fnamesList)

        var   currentButtonId = this._currentButtonId()

        if (fname == null) {
            this._classListAdd(currentButtonId, 'btnNotSelected')
            this._classListRemove(currentButtonId, 'btnSelected')
            this._displayDevicenameMsgL("Select Person")
            return

        } else if (runMode == "Initialize") {
            this._setupButtonNames()
            this._highlightSelectedNameButton("btnName0")
        }

        for (var i = 0; i < 10; i++) {
            if (fnames[i] == null) { break }
            if (fname == fnames[i]) {
                let buttonId = 'btnName' + i

                if (buttonId != currentButtonId) {
                    this._highlightSelectedNameButton(buttonId)
                }
            }
        }
    }
    //---------------------------------------------------------------------------
    _highlightSelectedNameButton(buttonPressId) {
        /* Highlight the selected button from the button press events or when the
        selected button needs to be redisplayed

        Parameters:
            buttonPressId - button number to select
        */
        const root          = this.shadowRoot
        const thisButtonId  = root.getElementById("thisButtonId")
        var currentButtonId = this._currentButtonId()

        const [devicename, fname] = this._getButtonDevicename(buttonPressId)

        this._displayDevicenameMsgL(devicename)

        this._classListRemove(currentButtonId, 'btnSelected')
        this._classListAdd(currentButtonId, 'btnNotSelected')

        thisButtonId.innerText = buttonPressId

        this._classListRemove(buttonPressId, 'btnNotSelected')
        this._classListRemove(buttonPressId, 'btnHoverName')
        this._classListAdd(buttonPressId, 'btnSelected')

    }
    //---------------------------------------------------------------------------
    _nameButtonPress(buttonPressId) {
        /* Handle the button press events. Get the devicename, do an 'icloud3_update'
        event_log devicename' service call to have the event_log attribute populated.

        Parameters:
            buttonressId - button number to select
        */

        const root         = this.shadowRoot
        const thisButtonId = root.getElementById("thisButtonId")
        const displayUserMsgFlag = root.getElementById("displayUserMsgFlag")

        const [devicename, fname] = this._getButtonDevicename(buttonPressId)

        if (this._isUserMessageDisplayed()) {
            displayUserMsgFlag.innerText = 'false'
            this._setupButtonNames()
        }

        this._highlightSelectedNameButton(buttonPressId)
        this._displayDevicenameMsgL(devicename)
        thisButtonId.innerText = buttonPressId

        // No action call when displaying startup messages
        if (fname.startsWith("initializing")) {
            'pass'
        } else if (fname.startsWith("stage")) {
            'pass'
        } else {
            this._hass.callService("icloud3", "action", {
                command: 'refresh_event_log',
                action_fname: "Refresh Event Log",
                device_name: devicename
            })
        }
    }

    //---------------------------------------------------------------------------
    _getButtonDevicename(buttonPressId) {
        const hass        = this._hass
        const root        = this.shadowRoot
        const fnamesList   = hass.states['sensor.icloud3_event_log'].attributes['fnames']
        const devicenames  = Object.keys(fnamesList)
        const fnames       = Object.values(fnamesList)

        if (buttonPressId == 'setup') {
            var buttonPressX = 0
        } else {
            var buttonPressX = buttonPressId.substr(-1)
        }
        var devicename = devicenames[buttonPressX]
        var fname = fnames[buttonPressX]

        return [devicename, fname]

    }
    //---------------------------------------------------------------------------
    _btnActionHandler() {
        /* Handle the button press events. Get the devicename, do an 'icloud3_action'
        event_log devicename' service call to have the event_log attribute populated.
        */
        const hass           = this._hass
        const root           = this.shadowRoot
        const fnamesList   = hass.states['sensor.icloud3_event_log'].attributes['fnames']
        const devicenames  = Object.keys(fnamesList)

        const btnAction      = root.getElementById('btnAction')
        const logRecdCnt     = root.getElementById("logRecdCnt")
        const thisButtonId   = root.getElementById("thisButtonId")
        const displayUserMsgFlag = root.getElementById("displayUserMsgFlag")

        var currentButtonId  = this._currentButtonId()
        var buttonPressX     = currentButtonId.substr(-1)
        var actionDevicename = devicenames[buttonPressX]

        displayUserMsgFlag.innerText = 'true'
        var actionValue = btnAction.value
        var actionIndex = btnAction.selectedIndex
        btnAction.options[actionIndex].selected = false

        if (actionValue == "dev-refresh_event_log") {
            actionDevicename = "startup_log"
        }

        // alert('1/'+actionValue+'/'+actionDevicename+'/'+btnAction.options[actionIndex].innerText+'/')
        //Device Actions
        if (actionValue.startsWith("dev-")) {
            actionValue = actionValue.slice(4)

            if (actionValue == "find-iphone-alert") {
                this._hass.callService("icloud3", "find_iphone_alert",
                    { device_name: actionDevicename })
            } else if (actionValue == "lost-device-alert") {
                this._hass.callService("icloud3", "lost_device_alert",
                    { device_name: actionDevicename })
            } else {
                this._hass.callService("icloud3", "action",
                    {
                        command: actionValue,
                        action_fname: btnAction.options[actionIndex].innerText,
                        device_name: actionDevicename
                    })
            }

        //Global Actions
        } else {
            this._hass.callService("icloud3", "action",
                {
                    command: actionValue,
                    action_fname: btnAction.options[actionIndex].innerText
                })

            if (actionValue == "restart") {
                thisButtonId.innerText = "setup"
                logRecdCnt.innerText = "-1"
            }
        }

        //Lose btnAction focus to reset selected option
        btnAction.blur()
    }

    //---------------------------------------------------------------------------
    _issue_evlog_version_svc_call() {
        /* Send an 'icloud3_action evlog_started' service call to iC3 to indicated the
        event_log has started. If this does not happen within a minute of starting iC3,
        an error message will be displayed indicating a restart is needed.
        */
        const root = this.shadowRoot
        const hass = this._hass
        var EvLogLatestVersion   = hass.states['sensor.icloud3_event_log'].attributes['version_evlog']
        const aboutVersion = root.getElementById("aboutVersion")
        const versionSentFlag = root.getElementById("versionSentFlag")

        if (versionSentFlag.innerText == 1) {
            return
        }
        if (aboutVersion == EvLogLatestVersion) {
            versionSentFlag.innerText = 1
            return
        } else {
            versionSentFlag.innerText = 0
        }

        this._hass.callService("icloud3", "action",
                        {command: 'event_log_version ' + aboutVersion.innerText})
        versionSentFlag.innerText = 1
    }

    //---------------------------------------------------------------------------
    _btnRefreshHandler() {
        const hass         = this._hass
        const root         = this.shadowRoot
        const fnamesList   = hass.states['sensor.icloud3_event_log'].attributes['fnames']
        const devicenames  = Object.keys(fnamesList)

        const statusMsgPopup = root.getElementById("statusMsgPopup")
        const displayUserMsgFlag = root.getElementById("displayUserMsgFlag")

        var currentButtonId  = this._currentButtonId()
        var buttonPressX     = currentButtonId.substr(-1)
        var actionDevicename = devicenames[buttonPressX]

        displayUserMsgFlag.innerText = 'false'

        if (statusMsgPopup.innerHTML != '' && statusMsgPopup.innerHTML != 'cancelMsgDisplay') {
            statusMsgPopup.innerHTML = 'cancelMsgDisplay'
        }

        this._hass.callService("icloud3", "action", {
            command: "refresh_event_log",
            action_fname: "Refresh Event Log",
            device_name: actionDevicename
        })
    }

    //---------------------------------------------------------------------------
    _btnSetUrlsHandler() {
        const hass             = this._hass
        const root             = this.shadowRoot
        const btnHelp          = root.getElementById("btnHelp")
        const btnIssues        = root.getElementById("btnIssues")
        const btnBuyMeACoffee  = root.getElementById("btnBuyMeACoffee")
        const btnConfig        = root.getElementById("btnConfig")
        const evlogBtnUrlsList = hass.states['sensor.icloud3_event_log'].attributes['evlog_btn_urls']
        // const evlogBtnUrlsListKeys   = Object.keys(evlogBtnUrlsList)
        // const evlogBtnUrlsListValues = Object.values(evlogBtnUrlsList)

        if (evlogBtnUrlsList["btnHelp"] != "") {
            btnHelp.setAttribute('href', evlogBtnUrlsList["btnHelp"]) }
        if (evlogBtnUrlsList["btnIssues"] != "") {
            btnIssues.setAttribute('href', evlogBtnUrlsList["btnIssues"]) }
        if (evlogBtnUrlsList["btnBuyMeACoffee"] != "") {
            btnBuyMeACoffee.setAttribute('href', evlogBtnUrlsList["btnBuyMeACoffee"]) }
        if (evlogBtnUrlsList["btnConfig"] != "") {
            btnConfig.setAttribute('href', evlogBtnUrlsList["btnConfig"]) }
    }

    //---------------------------------------------------------------------------
    _btnConfigHandler() {
        const hass             = this._hass
        const root             = this.shadowRoot
        const btnConfig        = root.getElementById("btnConfig")
        const evlogBtnUrlsList = hass.states['sensor.icloud3_event_log'].attributes['evlog_btn_urls']

        // Example: 'http://localhost:8123/config/integrations/integration/icloud3'

        if (evlogBtnUrlsList["btnConfig"] != "") {
            btnConfig.setAttribute('href', evlogBtnUrlsList["btnConfig"])
            return
        }

        /// v3.1.1 - Fixed problem creating btnConfig url.
        var targetUrl = ''
        var winLocUrl = window.location.href
        if (winLocUrl.indexOf(":8123")) {
            targetUrl = winLocUrl.split(':8123', 1)[0] + ':8123'
        } else if (winLocUrl.indexOf("/lovelace")) {
            targetUrl = winLocUrl.split('/lovelace', 1)[0]
        } else if (winLocUrl.indexOf("/dashboard")) {
            targetUrl = winLocUrl.split('/dashboard', 1)[0]
        } else if (targetUrl == "") {
            return }

        targetUrl = targetUrl + '/config/integrations/integration/icloud3'

        btnConfig.setAttribute('href', targetUrl)

        // alert("2039 winLocUrl="+winLocUrl+', configUrl='+configUrl+', targetUrl='+targetUrl+'|')
    }
    //---------------------------------------------------------------------------
    _btnClassMouseOverName(buttonId) {

        const root    = this.shadowRoot
        const button  = root.getElementById(buttonId)
        const devType = root.getElementById("devType")

        if (buttonId == "btnAction") { this._displayInfoText("Show Action Command List") }
        if (devType.innerText == "") { this._classListAdd(buttonId, 'btnHoverName') }
    }

    //---------------------------------------------------------------------------
    _btnClassMouseOver(buttonId) {

        const hass    = this._hass
        const root    = this.shadowRoot
        var iC3Version   = hass.states['sensor.icloud3_event_log'].attributes['version_ic3']
        var EvLogLatestVersion = hass.states['sensor.icloud3_event_log'].attributes['version_evlog']
        const aboutVersion    = root.getElementById("aboutVersion")
        // const button  = root.getElementById(buttonId)
        // const devType = root.getElementById("devType")
        const btnConfig = root.getElementById("btnConfig")

        if (buttonId == "btnHelp") {
            this._displayInfoText("iCloud3 User Manual")

        } else if (buttonId == "btnRefresh") {
            this._displayInfoText("Refresh Event Log")

        } else if (buttonId == "btnConfig") {
            this._btnConfigHandler()
            this._displayInfoText("Configure iCloud3 Settings")

        } else if (buttonId == "btnIssues") {
            this._displayInfoText("Open GitHub Issue")

        } else if (buttonId == "btnBuyMeACoffee") {
            this._displayInfoText("Buy Me a Coffee")

        } else if (buttonId == "btnAction") {
            var versionMsg = ""
            if (iC3Version   == null) {iC3Version = '?.?' }
            if (EvLogLatestVersion == null) {EvLogLatestVersion = '?.?'}
            versionMsg += "iCloud3 v" + iC3Version +", "
            versionMsg += "EvLog v" + aboutVersion.innerText
            if (EvLogLatestVersion != aboutVersion.innerText) {
                versionMsg += " (Avail v" + EvLogLatestVersion + ')'
            }

            this._displayInfoText(versionMsg)
        }
    }

    //---------------------------------------------------------------------------
    _btnClassMouseOut(buttonId) {

        const root         = this.shadowRoot
        const hass         = this._hass
        const button       = root.getElementById(buttonId)
        const devType      = root.getElementById("devType")
        this.logLevelDebug = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']

        this._displayInfoText('')

        if (devType.innerText == "") {
            this._classListRemove(buttonId, 'btnHoverName')
        }
    }
    //---------------------------------------------------------------------------
    _currentButtonId() {
        const root         = this.shadowRoot
        const thisButtonId = root.getElementById("thisButtonId")

        if (thisButtonId.innerText == 'setup') {
            return 'btnName0'
        } else {
            return thisButtonId.innerText
        }
    }

    //---------------------------------------------------------------------------
    _isUserMessageDisplayed() {
        // Determine if a user message is displayed in btnName0
        const root     = this.shadowRoot
        const btnName0 = root.getElementById("btnName0")

        if (btnName0 == null) {
            return false
        }
        return (btnName0.classList.contains('btnUserMessage'))
    }
    //---------------------------------------------------------------------------
    _classListRemove(elementName, className) {
        const root    = this.shadowRoot
        const element = root.getElementById(elementName)

        try {
            if (element.classList.contains(className)) {
                element.classList.remove(className)
            }
        }
        catch {
            'pass'
        }
    }

    //---------------------------------------------------------------------------
    _classListAdd(elementName, className) {
        const root    = this.shadowRoot
        const element = root.getElementById(elementName)

        try {
            element.classList.add(className)
        }
        catch {
            'pass'
        }
    }

    //---------------------------------------------------------------------------
    _displayDevicenameMsgL(msg) {
        // Display text below name button
        const root       = this.shadowRoot
        const hass       = this._hass
        const statusName = root.getElementById("statusName")
        const statusTime = root.getElementById("statusTime")

        if (this._isUserMessageDisplayed()) {
            msg = 'Click the message or click Refresh to redisplay the device names'
            this._classListRemove('statusName', 'errorAlertMsg')
            statusName.style.setProperty('width', '100%')
            statusName.style.setProperty('color', 'green')
            statusTime.innerText = ''
        } else {
            statusName.style.setProperty('width', '55%')
            statusName.style.setProperty('color', 'firebrick')
            this._displayTimeMsgR('')
        }
        statusName.innerText = msg
    }

    //---------------------------------------------------------------------------
    _displayTimeMsgR(msg) {
        /* Display text below the Action button:
            msg:
                - Empty = Display the last update time
                - Alert or Error = Display the message in the devicename field on the Left
                - Other = Display the text
        */
        const root       = this.shadowRoot
        const hass       = this._hass
        const statusTime = root.getElementById("statusTime")
        const statusName = root.getElementById("statusName")
        const updateTime   = hass.states['sensor.icloud3_event_log'].attributes['update_time'].slice(0, -7)

        if (this._isUserMessageDisplayed()) {
            return
        }

        if (msg == "") {
            msg = updateTime
        }
        statusTime.innerText = '\xa0' + msg + '\xa0'
    }

    //---------------------------------------------------------------------------
    _displayInfoText(msg) {
        /* Display text  in area below refresh & help buttons */
        const root         = this.shadowRoot
        const infoText     = root.getElementById("infoText")
        const aboutVersion = root.getElementById("aboutVersion")

        if (msg.startsWith('iCloud3 v')) {
            this._classListAdd('infoText', 'lightgray')
            this._classListRemove('infoText', 'primarycolor')
        } else {
            this._classListAdd('infoText', 'primarycolor')
            this._classListRemove('infoText', 'lightgray')
        }

        infoText.innerText = msg
    }

    //---------------------------------------------------------------------------
    getCardSize() {
        return 1
    }

}


customElements.define('icloud3-event-log-card', iCloud3EventLogCard)
+' '